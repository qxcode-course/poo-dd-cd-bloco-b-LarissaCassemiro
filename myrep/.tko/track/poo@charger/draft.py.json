{
    "patches": [
        {
            "label": "2025-10-27_20-05-27",
            "content": "@@ -853,17 +853,320 @@\n eria.%0A%0A%0A\n-%0A\n+# class Notebook: %0A#     def __init__(self, carregador: int, bateria: int, carga: int):%0A#         self.__carregador = carregador %0A#         self.__bateria = bateria %0A#         self.__carga =  carga %0A%0A%0A# class Carregador:%0A#     def __init__(self, potencia: int):%0A#         self.__potencia = potencia %0A%0A%0A# \n class Ba\n@@ -1168,24 +1168,26 @@\n ss Bateria:%0A\n+# \n     def __in\n@@ -1199,35 +1199,187 @@\n self, carga: int\n-):%0A\n+, capacidade: int):%0A#         pass%0A    %0A#     def ligar(self, capacidade: int):%0A%0A# class Bateria:%0A#     def __init__(self, carga: int, capacidade: int):%0A# \n         self.__c\n@@ -1382,34 +1382,35 @@\n .__carga = carga\n- \n %0A\n+# \n         self.__c\n@@ -1427,65 +1427,235 @@\n = ca\n-rga %0A        %0A    %0A    def descarregar(self, tempo: int):\n+pacidade%0A%0Aclass Bateria:%0A    def __init__(self, carga: int):%0A        self.__carga = carga%0A        self.__capacidade = carga%0A%0A    def descarregar(self, tempo: int):%0A        %22%22%22Reduz a carga da bateria conforme o tempo de uso.%22%22%22\n %0A   \n@@ -1783,32 +1783,104 @@\n t, tempo: int):%0A\n+        %22%22%22Aumenta a carga da bateria conforme a pot%C3%AAncia e o tempo.%22%22%22%0A\n         self.__c\n@@ -1903,17 +1903,16 @@\n  * tempo\n- \n %0A       \n@@ -2048,20 +2048,16 @@\n __carga%0A\n-    \n %0A    def\n@@ -2112,20 +2112,16 @@\n acidade%0A\n-    \n %0A    def\n@@ -2199,17 +2199,16 @@\n ade%7D%22%0A%0A%0A\n-%0A\n class Ca\n@@ -2216,17 +2216,16 @@\n regador:\n- \n %0A    def\n@@ -2290,26 +2290,17 @@\n potencia\n- %0A        \n+%0A\n %0A    def\n@@ -2351,20 +2351,16 @@\n otencia%0A\n-    \n %0A    def\n@@ -2423,20 +2423,17 @@\n ncia%7DW%22%0A\n-    \n+%0A\n %0Aclass N\n@@ -2435,18 +2435,18 @@\n ass Note\n-e\n b\n+o\n ok:%0A    \n@@ -2493,25 +2493,24 @@\n gador = None\n- \n %0A        sel\n@@ -2527,17 +2527,16 @@\n a = None\n- \n %0A       \n@@ -2557,17 +2557,16 @@\n  = False\n- \n %0A       \n@@ -2579,17 +2579,16 @@\n __tempo \n- \n = 0%0A%0A   \n@@ -2692,16 +2692,17 @@\n t(%22fail:\n+ \n carregad\n@@ -2737,17 +2737,16 @@\n   return\n- \n %0A       \n@@ -3968,16 +3968,55 @@\n  tempo%0A%0A\n+        # Caso 1: bateria e carregador%0A\n         \n@@ -4145,32 +4145,69 @@\n         return%0A%0A\n+        # Caso 2: somente carregador%0A\n         if self.\n@@ -4255,32 +4255,66 @@\n         return%0A%0A\n+        # Caso 3: somente bateria%0A\n         if self.\n",
            "lines": "202"
        },
        {
            "label": "2025-10-27_20-18-01",
            "content": "@@ -1112,17 +1112,16 @@\n ga = 0%0A%0A\n-%0A\n     def \n@@ -1296,17 +1296,16 @@\n cidade%0A%0A\n-%0A\n     def \n@@ -1504,24 +1504,25 @@\n acidade%7D%22%0A%0A%0A\n+%0A\n class Carreg\n@@ -1522,24 +1522,25 @@\n  Carregador:\n+ \n %0A    def __i\n@@ -1593,33 +1593,42 @@\n encia = potencia\n-%0A\n+ %0A        \n %0A    def get_pot\n@@ -1671,16 +1671,20 @@\n otencia%0A\n+    \n %0A    def\n@@ -1747,17 +1747,20 @@\n ncia%7DW%22%0A\n-%0A\n+    \n %0Aclass N\n@@ -1762,18 +1762,18 @@\n ass Note\n+e\n b\n-o\n ok:%0A    \n@@ -1816,32 +1816,33 @@\n arregador = None\n+ \n %0A        self.__\n@@ -1847,32 +1847,33 @@\n __bateria = None\n+ \n %0A        self.__\n@@ -1886,16 +1886,17 @@\n  = False\n+ \n %0A       \n@@ -1909,16 +1909,17 @@\n __tempo \n+ \n = 0%0A%0A   \n@@ -2023,17 +2023,16 @@\n t(%22fail:\n- \n carregad\n@@ -2059,32 +2059,33 @@\n           return\n+ \n %0A        self.__\n@@ -3303,47 +3303,8 @@\n po%0A%0A\n-        # Caso 1: bateria e carregador%0A\n     \n@@ -3449,45 +3449,8 @@\n rn%0A%0A\n-        # Caso 2: somente carregador%0A\n     \n@@ -3522,42 +3522,8 @@\n rn%0A%0A\n-        # Caso 3: somente bateria%0A\n     \n",
            "lines": "176"
        },
        {
            "label": "2025-10-27_20-19-13",
            "content": "\n# - Vamos modelar um notebook que pode ter ou n\u00e3o tanto carregador quanto bateria.\n# - Ter\u00e1 que reescrever os m\u00e9todos `usar <tempo>`, `ligar`.\n# - S\u00f3 poder\u00e1 `ligar` se tiver carga na bateria ou carregador.\n# - Enquanto em uso\n#   - se tiver apenas na bateria, a carga da bateria deve diminuir.\n#   - se estiver na bateria e no carregador, a carga deve aumentar.\n# - O carregador possui uma pot\u00eancia que implica na quantidade de carga carregada por unidade de tempo.\n# - A bateria possui uma carga e uma capacidade que representam a carga atual e o m\u00e1ximo poss\u00edvel de carga.\n# - Para simplificar, vamos utilizar minutos como a unidade de tempo e de carga.\n# - Uma bateria `15/50` significa que possui ainda 15 minutos de carga e suporta no m\u00e1ximo 50.\n# - Um carregador com 3 de pot\u00eancia consegue em um minuto de uso, adicionar 3 minutos de carga na bateria.\n\n\n\nclass Bateria:\n    def __init__(self, carga: int):\n        self.__carga = carga \n        self.__capacidade = carga \n        \n    \n    def descarregar(self, tempo: int):\n        self.__carga -= tempo\n        if self.__carga < 0:\n            self.__carga = 0\n\n\n    def carregar(self, potencia: int, tempo: int):\n        self.__carga += potencia * tempo \n        if self.__carga > self.__capacidade:\n            self.__carga = self.__capacidade\n\n\n    def get_carga(self):\n        return self.__carga\n    \n    def get_capacidade(self):\n        return self.__capacidade\n    \n    def __str__(self):\n        return f\"Bateria {self.__carga}/{self.__capacidade}\"\n\n\nclass Carregador:\n    def __init__(self, potencia: int):\n        self.__potencia = potencia\n\n    def get_potencia(self):\n        return self.__potencia\n\n    def __str__(self):\n        return f\"Carregador {self.__potencia}W\"\n\n\nclass Notebook:\n    def __init__(self):\n        self.__carregador = None\n        self.__bateria = None\n        self.__ligado = False\n        self.__tempo = 0\n\n    def set_charger(self, potencia: int):\n        if self.__carregador is not None:\n            print(\"fail: carregador j\u00e1 conectado\")\n            return\n        self.__carregador = Carregador(potencia)\n\n    def rm_charger(self):\n        if self.__carregador is None:\n            print(\"fail: Sem carregador\")\n            return\n        print(f\"Removido {self.__carregador.get_potencia()}W\")\n        self.__carregador = None\n        if self.__bateria is None:\n            self.__ligado = False\n\n    def set_battery(self, carga: int):\n        self.__bateria = Bateria(carga)\n\n    def rm_battery(self):\n        if self.__bateria is None:\n            print(\"fail: Sem bateria\")\n            return\n        print(f\"Removido {self.__bateria.get_carga()}/{self.__bateria.get_capacidade()}\")\n        self.__bateria = None\n        if self.__carregador is None:\n            self.__ligado = False\n\n    def turn_on(self):\n        if self.__ligado:\n            return\n        if self.__bateria and self.__bateria.get_carga() > 0:\n            self.__ligado = True\n        elif self.__carregador:\n            self.__ligado = True\n        else:\n            print(\"fail: n\u00e3o foi poss\u00edvel ligar\")\n\n    def turn_off(self):\n        self.__ligado = False\n\n    def use(self, tempo: int):\n        if not self.__ligado:\n            print(\"fail: desligado\")\n            return\n\n        self.__tempo += tempo\n\n        # Caso 1: bateria e carregador\n        if self.__bateria and self.__carregador:\n            self.__bateria.carregar(self.__carregador.get_potencia(), tempo)\n            return\n\n        # Caso 2: somente carregador\n        if self.__carregador and not self.__bateria:\n            return\n\n        # Caso 3: somente bateria\n        if self.__bateria and not self.__carregador:\n            carga_inicial = self.__bateria.get_carga()\n            self.__bateria.descarregar(tempo)\n            if self.__bateria.get_carga() == 0 and carga_inicial > 0:\n                print(\"fail: descarregou\")\n                self.__ligado = False\n\n    def __str__(self):\n        if not self.__ligado:\n            base = \"Notebook: desligado\"\n        else:\n            base = f\"Notebook: ligado por {self.__tempo} min\"\n\n        partes = []\n        if self.__carregador:\n            partes.append(str(self.__carregador))\n        if self.__bateria:\n            partes.append(str(self.__bateria))\n        if partes:\n            base += \", \" + \", \".join(partes)\n        return base\n\n\ndef main():\n    notebook = Notebook()\n\n    while True:\n        line = input()\n        args = line.split()\n        print(f\"${line}\")\n\n        if args[0] == \"end\":\n            break\n\n        elif args[0] == \"show\":\n            print(notebook)\n\n        elif args[0] == \"set_charger\":\n            potencia = int(args[1])\n            notebook.set_charger(potencia)\n\n        elif args[0] == \"rm_charger\":\n            notebook.rm_charger()\n\n        elif args[0] == \"set_battery\":\n            carga = int(args[1])\n            notebook.set_battery(carga)\n\n        elif args[0] == \"rm_battery\":\n            notebook.rm_battery()\n\n        elif args[0] == \"turn_on\":\n            notebook.turn_on()\n\n        elif args[0] == \"turn_off\":\n            notebook.turn_off()\n\n        elif args[0] == \"use\":\n            tempo = int(args[1])\n            notebook.use(tempo)\n\n\nmain()\n",
            "lines": "181"
        }
    ]
}