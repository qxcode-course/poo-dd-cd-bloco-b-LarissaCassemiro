{
    "patches": [
        {
            "label": "2025-10-20_22-45-50",
            "content": "@@ -6062,20 +6062,18 @@\n rafite: \n-null\n+%5B%5D\n %22%0A%0Adef m\n",
            "lines": "198"
        },
        {
            "label": "2025-10-20_22-47-09",
            "content": "@@ -5852,17 +5852,16 @@\n final)%0A%0A\n-%0A\n     def \n@@ -5879,77 +5879,8 @@\n f):%0A\n-        return f%22%7Bself.__calibre%7D:%7Bself.__dureza%7D:%7Bself.__tamanho%7D%22%0A%0A\n     \n",
            "lines": "198"
        },
        {
            "label": "2025-10-20_22-49-47",
            "content": "@@ -5852,16 +5852,17 @@\n final)%0A%0A\n+%0A\n     def \n@@ -5868,32 +5868,101 @@\n  __str__(self):%0A\n+        return f%22%7Bself.__calibre%7D:%7Bself.__dureza%7D:%7Bself.__tamanho%7D%22%0A%0A\n         if self.\n",
            "lines": "201"
        },
        {
            "label": "2025-10-20_22-50-01",
            "content": "@@ -4524,16 +4524,18 @@\n tamanho%7D\n+mm\n %22%0A%0A%0Aclas\n",
            "lines": "198"
        },
        {
            "label": "2025-10-27_18-23-04",
            "content": "#  Descri\u00e7\u00e3o\n#   - A lapiseira \u00e9 capaz de iniciar, inserir e remover grafite, al\u00e9m de escrever em uma folha.\n#   - Para inserir um grafite, \u00e9 necess\u00e1rio especificar o calibre (float), a dureza (string) e o tamanho em mm (int).\n#   - A remo\u00e7\u00e3o do grafite s\u00f3 \u00e9 poss\u00edvel se houver algum na lapiseira.\n#   - A escrita na folha s\u00f3 \u00e9 poss\u00edvel se houver grafite suficiente e se o tamanho do grafite for superior a 10mm.\n#   - A quantidade de grafite gasto varia de acordo com a dureza do grafite. Quanto mais macio, mais ele se desgasta.\n#   - Quando o tamanho do grafite atinge 10mm, n\u00e3o \u00e9 mais poss\u00edvel escrever.\n#   - Se n\u00e3o houver grafite suficiente para terminar a escrita na folha, \u00e9 emitido um aviso de texto incompleto.\n\n# - Responsabilidades\n#   - A classe Grafite `Lead` \u00e9 respons\u00e1vel por armazenar as informa\u00e7\u00f5es do grafite.\n#     - `thickness` \u00e9 a espessura e ter\u00e1 valores como 0.3, 0.5, 0.7.\n#     - `hardness` \u00e9 a dureza e poder\u00e1 ter os seguintes valores: `HB, 2B, 4B, 6B`.\n#     - O m\u00e9todo `usagePerSheet` retorna a quantidade de grafite gasto por folha.\n#       - Um grafite `HB` gasta `1mm` por folha.\n#       - Um grafite `2B` gasta `2mm` por folha.\n#       - Um grafite `4B` gasta `4mm` por folha.\n#       - Um grafite `6B` gasta `6mm` por folha.\n#     - `size` representa o tamanho do grafite em `mil\u00edmetros`.\n#   - A classe `Pencil` \u00e9 respons\u00e1vel por gerenciar as opera\u00e7\u00f5es de inser\u00e7\u00e3o, remo\u00e7\u00e3o de grafite e escrita na folha.\n#     - Ela referencia um \u00fanico objeto lapiseira como atributo.\n#     - E tamb\u00e9m possui um indicador de espessura `thickness`.\n# - Comandos\n#   - Todos os comandos seguem o modelo `$comando arg1 arg2 ...`.\n#   - `$iniciar calibre` - Inicializa a lapiseira com um determinado calibre.\n#   - `$inserir calibre dureza tamanho` - Insere um grafite com o calibre, dureza e tamanho especificados.\n#     - erros:\n#       - `fail: calibre incompativel` - Se o calibre do grafite for diferente do calibre da lapiseira.\n#       - `fail: ja existe grafite` - Se j\u00e1 houver um grafite na lapiseira.\n#   - `$remover` - Remove o grafite da lapiseira, se houver.\n#     - erros:\n#       - `fail: nao existe grafite` - Se n\u00e3o houver grafite na lapiseira.\n#   - `$escrever` - Escreve na folha, considerando o grafite presente na lapiseira.\n#     - O grafite \u00e9 gasto de acordo com a dureza.\n#     - erros:\n#       - `fail: nao existe grafite` - Se n\u00e3o houver grafite na lapiseira.\n#       - `fail: tamanho insuficiente` - Se o tamanho do grafite for insuficiente para come\u00e7ar a escrita.\n#       - `fail: folha incompleta` - Se o grafite n\u00e3o for suficiente para terminar a escrita.\n\n# - Parte 1: Inserir\n#   - Crie a classe Grafite `Lead` com o atributo tamanho `size`.\n#   - Crie a classe Lapiseira `Pencil` com o atributo ponta `tip` inicializado como `null`.\n#   - Implemente o m\u00e9todo tem grafite `hasGrafite` que retorna `true` se houver grafite na lapiseira.\n#   - Implemente o m\u00e9todo inserir `insert` que insere um grafite na lapiseira, se n\u00e3o houver grafite.\n#   - Implemente o m\u00e9todo `toString` que mostra a lapiseira e o grafite presente.\n\n# - Parte 2: Remover Grafite\n#   - Implemente o m\u00e9todo `remove` que retira o grafite da lapiseira, se houver.\n#   - Verifique se o m\u00e9todo `remove` retorna o grafite removido ou `null` se n\u00e3o havia grafite.\n\n# - Parte 3: Escrever na Folha\n#   - Implemente o m\u00e9todo `writePage` que escreve na folha.\n#   - Implemente o m\u00e9todo `usagePerSheet` que retorna a quantidade de grafite gasto por folha.\n#   - Verifique se a lapiseira consegue escrever na folha.\n#   - Fa\u00e7a as verifica\u00e7\u00f5es antes de escrever na folha.\n#   - Para ver se o grafite ser\u00e1 suficiente para escrever na folha, verifique qual o tamanho final que ele teria se fizesse a folha completa.\n#     - Se esse tamanho for menor que 10mm, ele deve gastar o que for poss\u00edvel e parar a folha pela metade.\n\n\nclass Grafite:\n    def __init__(self, calibre: float, dureza: str, tamanho: int):\n        self.__calibre = calibre\n        self.__dureza = dureza\n        self.__tamanho = tamanho\n\n    def get_calibre(self):\n        return self.__calibre\n\n    def get_dureza(self):\n        return self.__dureza\n\n    def get_tamanho(self):\n        return self.__tamanho\n\n    def set_tamanho(self, valor: int):\n        self.__tamanho = valor\n\n    def gasto_por_folha(self):\n        gastos = {\n            \"HB\": 1,\n            \"2B\": 2,\n            \"4B\": 4,\n            \"6B\": 6\n        }\n        return gastos.get(self.__dureza, 0)\n\n    def __str__(self):\n        return f\"{self.__calibre:.1f}:{self.__dureza}:{self.__tamanho}\"\n\n\nclass Lapiseira:\n    def __init__(self, calibre: float):\n        self.__calibre = calibre\n        self.__grafite = None\n\n    def get_calibre(self):\n        return self.__calibre\n\n    def tem_grafite(self):\n        return self.__grafite is not None\n\n    def inserir(self, grafite: Grafite):\n        if grafite.get_calibre() != self.__calibre:\n            print(\"fail: calibre incompativel\")\n            return\n        if self.tem_grafite():\n            print(\"fail: ja existe grafite\")\n            return\n        self.__grafite = grafite\n\n    def remover(self):\n        if not self.tem_grafite():\n            print(\"fail: nao existe grafite\")\n            return None\n        grafite_removido = self.__grafite\n        self.__grafite = None\n        return grafite_removido\n\n    def escrever(self):\n        if not self.tem_grafite():\n            print(\"fail: nao existe grafite\")\n            return\n\n        grafite = self.__grafite\n        tamanho = grafite.get_tamanho()\n\n        if tamanho <= 10:\n            print(\"fail: tamanho insuficiente\")\n            return\n\n        gasto = grafite.gasto_por_folha()\n        tamanho_final = tamanho - gasto\n\n        if tamanho_final < 10:\n            grafite.set_tamanho(10)\n            print(\"fail: folha incompleta\")\n            return\n\n        grafite.set_tamanho(tamanho_final)\n\n    def __str__(self):\n        if self.tem_grafite():\n            return f\"calibre: {self.__calibre:.1f}, grafite: [{self.__grafite}]\"\n        else:\n            return f\"calibre: {self.__calibre:.1f}, grafite: null\"\n\ndef main():\n    lapiseira = None\n\n    while True:\n        line = input()\n        print(f\"${line}\")\n        args = line.split()\n\n        if args[0] == \"end\":\n            break\n\n        elif args[0] == \"init\":\n            calibre = float(args[1])\n            lapiseira = Lapiseira(calibre)\n\n        elif args[0] == \"show\":\n            if lapiseira is None:\n                print(\"fail: lapiseira nao iniciada\")\n            else:\n                print(lapiseira)\n\n        elif args[0] == \"insert\":\n            if lapiseira is None:\n                print(\"fail: lapiseira nao iniciada\")\n                continue\n\n            calibre = float(args[1])\n            dureza = args[2]\n            tamanho = int(args[3])\n            grafite = Grafite(calibre, dureza, tamanho)\n            lapiseira.inserir(grafite)\n\n        elif args[0] == \"remove\":\n            if lapiseira is None:\n                print(\"fail: lapiseira nao iniciada\")\n                continue\n            lapiseira.remover()\n\n        elif args[0] == \"write\":\n            if lapiseira is None:\n                print(\"fail: lapiseira nao iniciada\")\n                continue\n            lapiseira.escrever()\n\n        else:\n            print(\"fail: comando invalido\")\nmain()\n\n\n\n\n    ",
            "lines": "198"
        }
    ]
}