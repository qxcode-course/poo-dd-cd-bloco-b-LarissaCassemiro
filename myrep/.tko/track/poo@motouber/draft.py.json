{
    "patches": [
        {
            "label": "2025-10-27_19-29-17",
            "content": "@@ -979,616 +979,8 @@\n o.%0A%0A\n-class Pessoa: %0A    def __init__(self, nome: str, dinheiro: float):%0A        self.__nome = nome %0A        self.__dinheiro = dinheiro %0A    %0A    def get_nome(self):%0A        return self.__nome%0A    %0A    def get_dinheiro(self):%0A        return self.__dinheiro%0A    %0A    def adicionar_Saldo(self, valor: float):%0A        self.__dinheiro += valor %0A%0A    def remover_Saldo(self, valor: float):%0A        self.__dinheiro -= valor%0A        if valor %3E self.__dinheiro:%0A            valor = self.__dinheiro%0A            return valor %0A        %0A    def __str__(self):%0A        return f%22%7Bself.get_nome%7D: R$%7Bself.get_dinheiro:.2f%7D%22%0A    %0A\n %0Acla\n@@ -2664,16 +2664,618 @@\n ro%7D%22)%0A%0A%0A\n+class Pessoa: %0A    def __init__(self, nome: str, dinheiro: float):%0A        self.__nome = nome %0A        self.__dinheiro = dinheiro %0A    %0A    def get_nome(self):%0A        return self.__nome%0A    %0A    def get_dinheiro(self):%0A        return self.__dinheiro%0A    %0A    def adicionar_Saldo(self, valor: float):%0A        self.__dinheiro += valor %0A%0A    def remover_Saldo(self, valor: float):%0A        self.__dinheiro -= valor%0A        if valor %3E self.__dinheiro:%0A            valor = self.__dinheiro%0A            return valor %0A        %0A    def __str__(self):%0A        return f%22%7Bself.get_nome%7D: R$%7Bself.get_dinheiro:.2f%7D%22\n %0A%0A%0A%0A    \n",
            "lines": "90"
        },
        {
            "label": "2025-10-27_19-31-48",
            "content": "@@ -3277,929 +3277,8 @@\n %0A%0A%0A%0A\n-def main():%0A    moto = Moto()%0A    while True:%0A        line = input()%0A        args = line.split()%0A        print(%22$+line%22)%0A%0A        if args %5B0%5D == %22end%22:%0A            break%0A%0A%0Adef main():%0A    moto = Moto()%0A    while True:%0A        line = input.split()%0A        print(f%22$%7Bline%7D%22)%0A        args = line.split()%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A%0A        elif args%5B0%5D == %22show%22:%0A            print(moto)%0A%0A        elif args%5B0%5D == %22setDriver%22:%0A            nome = args%5B1%5D%0A            dinheiro = float(args%5B2%5D)%0A            moto.self.__motorista(Pessoa(nome, dinheiro))%0A%0A        elif args%5B0%5D == %22setPass%22:%0A            nome = args%5B1%5D%0A            dinheiro = float(args%5B2%5D)%0A            moto.set_passageiro(Pessoa(nome, dinheiro))%0A%0A        elif args%5B0%5D == %22drive%22:%0A            km = float(args%5B1%5D)%0A            moto.dirigir(km)%0A%0A        elif args%5B0%5D == %22leavePass%22:%0A            moto.leave_passageiro()%0A%0A%0Amain()%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A    %0A%0A%0A%0A\n %0A%0A%0A \n",
            "lines": "92"
        },
        {
            "label": "2025-10-27_19-38-36",
            "content": "@@ -3472,16 +3472,18 @@\n o = Moto\n+()\n %0A    whi\n",
            "lines": "150"
        },
        {
            "label": "2025-10-27_19-38-50",
            "content": "@@ -3464,34 +3464,32 @@\n %0A    moto = Moto\n-()\n %0A    while True:\n",
            "lines": "150"
        },
        {
            "label": "2025-10-27_19-39-04",
            "content": "@@ -1365,19 +1365,8 @@\n     \n- if valor %3E\n  sel\n@@ -1381,56 +1381,36 @@\n eiro\n-:%0A            pago = self.__dinheiro%0A           \n+ -= valor%0A        if valor %3E\n  sel\n@@ -1421,20 +1421,17 @@\n dinheiro\n- = 0\n+:\n %0A       \n@@ -1439,45 +1439,15 @@\n     \n-return pago%0A        else:%0A           \n+valor =\n  sel\n@@ -1454,33 +1454,24 @@\n f.__dinheiro\n- -= valor\n %0A           \n@@ -1479,24 +1479,25 @@\n return valor\n+ \n %0A        %0A  \n@@ -1544,27 +1544,30 @@\n elf.\n-_\n+get\n _nome%7D:\n-%7Bint(\n+ R$%7B\n self.\n-_\n+get\n _din\n@@ -1571,17 +1571,20 @@\n dinheiro\n-)\n+:.2f\n %7D%22%0A    %0A\n@@ -1628,10 +1628,13 @@\n usto\n-=0\n+: int\n , mo\n@@ -1640,21 +1640,21 @@\n otorista\n-=None\n+: str\n , passag\n@@ -1661,13 +1661,13 @@\n eiro\n-=None\n+: str\n ):%0A \n@@ -1742,33 +1742,33 @@\n      self.__pass\n-a\n+e\n geiro = passagei\n@@ -1836,1247 +1836,1748 @@\n     \n-self.__motorista = motorista%0A%0A    def embarcar_Passageiro(self, passageiro: Pessoa):%0A        if self.__motorista is None:%0A            print(%22fail: no driver%22)%0A            return %0A        self.__passageiro = passageiro%0A    %0A    def dirigir(self, km: float):%0A        if self.__motorista is None:%0A            print(%22fail: no driver%22)%0A            return%0A        if self.__passageiro is None:%0A            print(%22fail: no passenger%22)%0A            return%0A        self.__custo += km%0A%0A    def desembarcar_Passageiro(self):%0A        if self.__passageiro is None:%0A            print(%22fail: no passenger%22)%0A            return %0A        %0A        pago = self.__passageiro.remover_Saldo(self.__custo)%0A        if pago %3C self.__custo:%0A            print(%22fail: Passenger does not have enough money%22)%0A        self.__motorista.adicionar_Saldo(self.__custo)%0A        print(f%22%7Bself.__passageiro.get_nome()%7D:%7Bint(self.__passageiro.get_dinheiro())%7D left%22)%0A        %0A        self.__passageiro = None%0A        self.__custo = 0%0A%0A    def __str__(self):%0A        return f%22Cost: %7Bself.__custo%7D, Driver: %7Bself.__motorista%7D, Passenger: %7Bself.__passageiro%7D%22%0A%0A%0Adef main():%0A    moto = Moto()%0A    while True:%0A        line = input()%0A        args = line.split()%0A        print(f%22$%7Bline%7D%22\n+if self.__motorista is None:%0A            self.__motorista = motorista%0A            print(f%22Motorista %7Bmotorista.get_nome()%7D embarcou%22)%0A        else: %0A            print(%22fail: j%C3%A1 tem motorista na moto%22)%0A%0A    def embarcar_Passageiro(self, passageiro: Pessoa):%0A        if self.__motorista is None:%0A            print(%22Fail: n%C3%A3o h%C3%A1 motorista na moto%22)%0A            return %0A        if self.__passegeiro is not None:%0A            print(%22Fail: j%C3%A1 h%C3%A1 passageiro na moto%22)%0A            return %0A        %0A        self.__passegeiro = passageiro%0A        self.__motorista = 0 %0A        print(f%22 Passageiro %7Bpassageiro.get_nome()%7D embarcou%22)%0A    %0A    def dirigir (self, km: float):%0A        if self.__passegeiro is None:%0A            print (%22Fail: n%C3%A3o h%C3%A1 passageiro na moto%22)%0A            return%0A        self.__custo += 1 %0A        print (f%22 a moto andou %7Bkm%7D km. E o custo atual %C3%A9: %7Bself.__custo:.2f%7D%22)%0A%0A    def desembarcar_Passegeiro(self):%0A        if self.__passegeiro is None:%0A            print(%22fail: n%C3%B5 h%C3%A1 passageiro para embarcar%22)%0A            return %0A        pagou = self.__passageiro.remove_dinheiro(self.__custo)%0A        self.__motorista.add_dinheiro(self.__custo)%0A%0A        print(f%22%7Bself.__passageiro.get_nome()%7D pagou R$%7Bpagou:.2f%7D a %7Bself.__motorista.get_nome()%7D.%22)%0A        self.__passageiro = None%0A        self.__custo = 0%0A%0A    def __str__(self):%0A        print (f%22 Custo:%7Bself.__custo%7D, Motorista:%7Bself.__motorista%7D, Passageiro:%7Bself.__passegeiro%7D%22)%0A%0A%0A%0Adef main():%0A    moto = Moto()%0A    while True:%0A        line = input()%0A        args = line.split()%0A        print(%22$+line%22)%0A%0A        if args %5B0%5D == %22end%22:%0A            break%0A%0A%0Adef main():%0A    moto = Moto()%0A    while True:%0A        line = input.split()%0A        print(f%22$%7Bline%7D%22)%0A        args = line.split(\n )%0A%0A \n@@ -3799,26 +3799,24 @@\n    moto.\n-embarcar_M\n+self.__m\n otorista\n@@ -3958,26 +3958,21 @@\n    moto.\n-embarcar_P\n+set_p\n assageir\n@@ -4048,18 +4048,20 @@\n    km = \n-in\n+floa\n t(args%5B1\n@@ -4147,29 +4147,23 @@\n    moto.\n-desembarcar_P\n+leave_p\n assageir\n@@ -4180,25 +4180,24 @@\n ()%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A\n-%0A\n %0A%0A    %0A%0A%0A%0A%0A%0A\n",
            "lines": "150"
        },
        {
            "label": "2025-10-27_19-46-22",
            "content": "# - Voc\u00ea vai gerenciar um objeto da classe moto que faz corridas com passageiros.\n# - A moto pode ter um motorista e pode ter um passageiro.\n# - A moto deve registrar o custo atual da corrida.\n# - O passageiro deve pagar o motorista quando descer da moto.\n# - Motorista e Passageiro s\u00e3o pessoas que tem nome e dinheiro.\n# - O passageiro n\u00e3o pode subir na moto se n\u00e3o tiver motorista.\n# - Quando o passageiro entra na moto, come\u00e7a a contagem do custo da corrida.\n# - Cada km percorrido aumenta o custo da corrida em 1 real.\n# - Na hora de desembarcar, o passageiro paga o motorista de acordo com o que foi percorrido.\n# - Se n\u00e3o tiver dinheiro suficiente, o passageiro d\u00e1 tudo que tem.\n# - O motorista sempre recebe o valor completo da corrida, porque o Uber paga o que falta.\n\n# - Crie a classe Moto com os atributos custo, motorista e passageiro.\n# - Ambas as classes devem ter atributos privados.\n# - Crie os m\u00e9todos que julgar necess\u00e1rio com os devidos modificadores de acesso.\n\nclass Pessoa: \n    def __init__(self, nome: str, dinheiro: float):\n        self.__nome = nome \n        self.__dinheiro = dinheiro \n    \n    def get_nome(self):\n        return self.__nome\n    \n    def get_dinheiro(self):\n        return self.__dinheiro\n    \n    def adicionar_Saldo(self, valor: float):\n        self.__dinheiro += valor \n\n    def remover_Saldo(self, valor: float):\n        if valor > self.__dinheiro:\n            pago = self.__dinheiro\n            self.__dinheiro = 0\n            return pago\n        else:\n            self.__dinheiro -= valor\n            return valor\n        \n    def __str__(self):\n        return f\"{self.__nome}:{int(self.__dinheiro)}\"\n    \n\nclass Moto:\n    def __init__(self, custo=0, motorista=None, passageiro=None):\n        self.__custo = custo\n        self.__motorista = motorista\n        self.__passageiro = passageiro\n\n    def embarcar_Motorista(self, motorista: Pessoa):\n        self.__motorista = motorista\n\n    def embarcar_Passageiro(self, passageiro: Pessoa):\n        if self.__motorista is None:\n            print(\"fail: no driver\")\n            return \n        self.__passageiro = passageiro\n    \n    def dirigir(self, km: float):\n        if self.__motorista is None:\n            print(\"fail: no driver\")\n            return\n        if self.__passageiro is None:\n            print(\"fail: no passenger\")\n            return\n        self.__custo += km\n\n    def desembarcar_Passageiro(self):\n        if self.__passageiro is None:\n            print(\"fail: no passenger\")\n            return \n        \n        pago = self.__passageiro.remover_Saldo(self.__custo)\n        if pago < self.__custo:\n            print(\"fail: Passenger does not have enough money\")\n        self.__motorista.adicionar_Saldo(self.__custo)\n        print(f\"{self.__passageiro.get_nome()}:{int(self.__passageiro.get_dinheiro())} left\")\n        \n        self.__passageiro = None\n        self.__custo = 0\n\n    def __str__(self):\n        return f\"Cost: {self.__custo}, Driver: {self.__motorista}, Passenger: {self.__passageiro}\"\n\n\ndef main():\n    moto = Moto()\n    while True:\n        line = input()\n        args = line.split()\n        print(f\"${line}\")\n\n        if args[0] == \"end\":\n            break\n\n        elif args[0] == \"show\":\n            print(moto)\n\n        elif args[0] == \"setDriver\":\n            nome = args[1]\n            dinheiro = float(args[2])\n            moto.embarcar_Motorista(Pessoa(nome, dinheiro))\n\n        elif args[0] == \"setPass\":\n            nome = args[1]\n            dinheiro = float(args[2])\n            moto.embarcar_Passageiro(Pessoa(nome, dinheiro))\n\n        elif args[0] == \"drive\":\n            km = int(args[1])\n            moto.dirigir(km)\n\n        elif args[0] == \"leavePass\":\n            moto.desembarcar_Passageiro()\n\n\nmain()\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n        ",
            "lines": "137"
        }
    ]
}