{
    "patches": [
        {
            "label": "2025-10-14_13-32-20",
            "content": "@@ -1,2642 +0,0 @@\n-# Seu objetivo %C3%A9 construtir uma Classe Rel%C3%B3gio %60Watch%60 que garanta que a hora, minuto e segundo sejam v%C3%A1lidos.%0A%0A# - Construtor%0A#   - O construtor deve receber 3 par%C3%A2metros, hora, minuto e segundo.%0A#   - Para fazer a inicializa%C3%A7%C3%A3o dos 3 par%C3%A2metros, utilize os m%C3%A9todos set.%0A# - Crie os m%C3%A9todos getters e setters para cada atributo.%0A#   - Os m%C3%A9todos set devem garantir que os valor atribu%C3%ADdo sempre seja v%C3%A1lido, ou n%C3%A3o realize nenhuma mudan%C3%A7a.%0A# - %60toString%60%0A#   - Crie um m%C3%A9todo que imprime a hora no formato HH:MM:SS.%0A#   - Voc%C3%AA precisar%C3%A1 pesquisar como formatar n%C3%BAmeros menores que 10 com 2 d%C3%ADgitos (ex: 01, 02, 03).%0A# - Nos m%C3%A9todos set, realize a valida%C3%A7%C3%A3o dos valores.%0A#   - Hora deve ser entre 0 e 23.%0A#   - Minuto e segundo devem ser entre 0 e 59.%0A# - Pr%C3%B3ximo Segundo %60nextSecond%60%0A#   - Crie um m%C3%A9todo nextSecond que incrementa o segundo em 1.%0A#   - Se o segundo for 59, ele deve ser zerado e o minuto incrementado.%0A#   - Se o minuto for 59, ele deve ser zerado e a hora incrementada.%0A#   - Se a hora for 23, ela deve ser zerada.%0A%0Aclass Relogio():%0A    def __init__(self, hora: int, minuto: int, segundo: int):%0A        self.set_hora(hora)%0A        self.set_minuto(minuto)%0A        self.set_segundo(segundo)   %0A%0A    def set_hora(self, hora: int):%0A        if %3C= 0 hora %3C= 23:%0A            self.__hora = hora %0A        else: %0A            print (%22Hora inv%C3%A1lida! Deve estar entre 0 e 23%22.)%0A%0A    def set_minuto(self, minuto: int):%0A        if %3C= 0 minuto %3C= 59:%0A            self.__minuto = minuto %0A        else: %0A            print (%22Minuto inv%C3%A1lido! Deve estar entre 0 e 59%22.)%0A%0A    def set_segundo(self, segundo: int):%0A        if %3C= 0 segundo %3C= 59:%0A            self.__segundo = segundo %0A        else: %0A            print (%22Segundo inv%C3%A1lido! Deve estar entre 0 e 59%22.)%0A%0A    def get_hora(self):%0A        return self.__hora%0A    %0A    def get_minuto(self):%0A        return selt.__minuto%0A%0A    def get_segundo(self):%0A        return self.__segundo%0A%0A%0A    def __str__(self):%0A        return f%22%7Bself.__hora:02d%7D:%7Bself.__minuto:02d%7D:%7Bself.__segundo:02d%7D%22%0A%0A    def nextSecond(self):%0A        self.__segundo += 1%0A        if self.__segundo %3E 59:%0A            self.__segundo = 0%0A            self.__minuto += 1%0A            if self.__minuto %3E 59:%0A                self.__minuto = 0%0A                self.__hora += 1%0A                if self.__hora %3E 23:%0A                    self.__hora = 0%0A%0A    def __str__(self):%0A        return self.toString()%0A%0Adef main():%0A    relogio = Watch(23, 59, 58)%0A    print(%22Hora atual:%22, relogio)%0A%0A    relogio.nextSecond()%0A    print(%22Depois de 1 segundo:%22, relogio)%0A%0A    relogio.nextSecond()%0A    print(%22Depois de 2 segundos:%22, relogio)%0A%0A    main()%0A%0A\n",
            "lines": "0"
        },
        {
            "label": "2025-10-14_14-20-56",
            "content": "@@ -2435,208 +2435,190 @@\n o = \n-Relogio%0A    while True:%0A        line = input()%0A        args = line.split\n+Watch(23, 59, 58)%0A    print(%22Hora atual:%22, relogio)%0A%0A    relogio.nextSecond\n ()%0A    \n- \n-   \n print(\n-f%22$%7Bline%7D%22)%0A%0A        if args%5B0%5D == %22end%22:%0A            break %0A    \n+%22Depois de 1 segundo:%22, relogio)%0A%0A\n     \n+r\n el\n-if args%5B0%5D == %22show%22:%0A            print(\n+ogio.nextSecond()%0A    print(%22Depois de 2 segundos:%22, \n relo\n@@ -2622,16 +2622,17 @@\n elogio)%0A\n+%0A\n     main\n",
            "lines": "82"
        },
        {
            "label": "2025-10-14_14-25-17",
            "content": "@@ -1,59 +1,89 @@\n-c\n+# Seu objetivo %C3%A9 construtir uma C\n lass\n+e\n  Rel\n-ogio:%0A    def __init__(self, hora: int\n+%C3%B3gio %60Watch%60 que garanta que a hora\n , minuto\n : in\n@@ -82,22 +82,18 @@\n nuto\n-: int,\n+ e\n  segundo\n : in\n@@ -92,163 +92,1026 @@\n undo\n-: int):%0A        self.__hora = 0%0A        self.__minuto = 0%0A        self.__segundo = 0%0A%0A        # Inicializa%C3%A7%C3%A3o usando os m%C3%A9todos set (como o enunciado pede)\n+ sejam v%C3%A1lidos.%0A%0A# - Construtor%0A#   - O construtor deve receber 3 par%C3%A2metros, hora, minuto e segundo.%0A#   - Para fazer a inicializa%C3%A7%C3%A3o dos 3 par%C3%A2metros, utilize os m%C3%A9todos set.%0A# - Crie os m%C3%A9todos getters e setters para cada atributo.%0A#   - Os m%C3%A9todos set devem garantir que os valor atribu%C3%ADdo sempre seja v%C3%A1lido, ou n%C3%A3o realize nenhuma mudan%C3%A7a.%0A# - %60toString%60%0A#   - Crie um m%C3%A9todo que imprime a hora no formato HH:MM:SS.%0A#   - Voc%C3%AA precisar%C3%A1 pesquisar como formatar n%C3%BAmeros menores que 10 com 2 d%C3%ADgitos (ex: 01, 02, 03).%0A# - Nos m%C3%A9todos set, realize a valida%C3%A7%C3%A3o dos valores.%0A#   - Hora deve ser entre 0 e 23.%0A#   - Minuto e segundo devem ser entre 0 e 59.%0A# - Pr%C3%B3ximo Segundo %60nextSecond%60%0A#   - Crie um m%C3%A9todo nextSecond que incrementa o segundo em 1.%0A#   - Se o segundo for 59, ele deve ser zerado e o minuto incrementado.%0A#   - Se o minuto for 59, ele deve ser zerado e a hora incrementada.%0A#   - Se a hora for 23, ela deve ser zerada.%0A%0Aclass Relogio():%0A    def __init__(self, hora: int, minuto: int, segundo: int):\n %0A   \n@@ -1204,39 +1204,12 @@\n ndo)\n-%0A%0A\n    \n- # ===== M%C3%89TODOS SET =====\n+%0A\n %0A   \n@@ -1251,20 +1251,20 @@\n      if \n-0 \n %3C=\n+ 0\n  hora %3C=\n@@ -1298,16 +1298,17 @@\n a = hora\n+ \n %0A       \n@@ -1305,32 +1305,33 @@\n a %0A        else:\n+ \n %0A            pri\n@@ -1332,24 +1332,19 @@\n    print\n+ \n (%22\n-fail: \n Hora inv\n@@ -1374,16 +1374,17 @@\n  0 e 23%22\n+.\n )%0A%0A    d\n@@ -1428,20 +1428,20 @@\n      if \n-0 \n %3C=\n+ 0\n  minuto \n@@ -1481,16 +1481,17 @@\n = minuto\n+ \n %0A       \n@@ -1488,32 +1488,33 @@\n o %0A        else:\n+ \n %0A            pri\n@@ -1515,24 +1515,19 @@\n    print\n+ \n (%22\n-fail: \n Minuto i\n@@ -1555,24 +1555,25 @@\n ntre 0 e 59%22\n+.\n )%0A%0A    def s\n@@ -1619,12 +1619,12 @@\n  if \n-0 \n %3C=\n+ 0\n  seg\n@@ -1671,16 +1671,17 @@\n  segundo\n+ \n %0A       \n@@ -1686,16 +1686,17 @@\n    else:\n+ \n %0A       \n@@ -1709,16 +1709,11 @@\n rint\n+ \n (%22\n-fail: \n Segu\n@@ -1754,41 +1754,12 @@\n  59%22\n+.\n )%0A%0A\n-    # ===== M%C3%89TODOS GET =====%0A\n     \n@@ -1805,16 +1805,20 @@\n .__hora%0A\n+    \n %0A    def\n@@ -1850,25 +1850,25 @@\n   return sel\n-f\n+t\n .__minuto%0A%0A \n@@ -1928,34 +1928,8 @@\n do%0A%0A\n-    # ===== toString =====\n %0A   \n@@ -1937,24 +1937,23 @@\n def \n-toString\n+__str__\n (self):%0A\n     \n@@ -1952,58 +1952,8 @@\n f):%0A\n-        # Formata com dois d%C3%ADgitos (ex: 08:05:09)%0A\n     \n@@ -2030,97 +2030,8 @@\n %7D%22%0A%0A\n-    def __str__(self):%0A        return self.toString()%0A%0A    # ===== Pr%C3%B3ximo Segundo =====%0A\n     \n@@ -2354,45 +2354,62 @@\n  0%0A%0A\n-%0A# ===== C%C3%B3digo de Teste (main) =====\n+    def __str__(self):%0A        return self.toString()%0A\n %0Adef\n@@ -2442,18 +2442,8 @@\n ogio\n-(0, 0, 0)%0A\n %0A   \n@@ -2481,16 +2481,8 @@\n ut()\n-.strip()\n %0A   \n@@ -2583,144 +2583,9 @@\n reak\n-%0A%0A        elif args%5B0%5D == %22init%22:%0A            h, m, s = int(args%5B1%5D), int(args%5B2%5D), int(args%5B3%5D)%0A            relogio = Relogio(h, m, s)%0A\n+ \n %0A   \n@@ -2644,384 +2644,16 @@\n io)%0A\n-%0A \n     \n-   elif args%5B0%5D == %22set%22:%0A            tipo = args%5B1%5D%0A            valor = int(args%5B2%5D)%0A            if tipo == %22h%22:%0A                relogio.set_hora(valor)%0A            elif tipo == %22m%22:%0A                relogio.set_minuto(valor)%0A            elif tipo == %22s%22:%0A                relogio.set_segundo(valor)%0A%0A        elif args%5B0%5D == %22next%22:%0A            relogio.nextSecond()%0A%0A%0A\n main()%0A\n+%0A\n",
            "lines": "83"
        },
        {
            "label": "2025-10-14_14-41-40",
            "content": "@@ -138,32 +138,103 @@\n lf.__segundo = 0\n+%0A%0A        # Inicializa%C3%A7%C3%A3o usando os m%C3%A9todos set (como o enunciado pede)\n %0A        self.se\n@@ -309,24 +309,54 @@\n o(segundo)%0A%0A\n+    # ===== M%C3%89TODOS SET =====%0A\n     def set_\n@@ -890,32 +890,62 @@\n entre 0 e 59%22)%0A%0A\n+    # ===== M%C3%89TODOS GET =====%0A\n     def get_hora\n@@ -1102,27 +1102,104 @@\n     \n-def toString(self):\n+# ===== toString =====%0A    def toString(self):%0A        # Formata com dois d%C3%ADgitos (ex: 08:05:09)\n %0A   \n@@ -1328,16 +1328,50 @@\n ring()%0A%0A\n+    # ===== Pr%C3%B3ximo Segundo =====%0A\n     def \n@@ -1687,16 +1687,53 @@\n a = 0%0A%0A%0A\n+# ===== C%C3%B3digo de Teste (main) =====%0A\n def main\n@@ -2160,24 +2160,22 @@\n     \n-h = int(\n+tipo = \n args%5B1%5D\n-)\n %0A   \n@@ -2183,17 +2183,21 @@\n         \n-m\n+valor\n  = int(a\n@@ -2220,25 +2220,28 @@\n     \n-s = int(args%5B3%5D)%0A\n+if tipo == %22h%22:%0A    \n     \n@@ -2269,11 +2269,49 @@\n ora(\n-h\n+valor\n )%0A\n+            elif tipo == %22m%22:%0A    \n     \n@@ -2341,11 +2341,49 @@\n uto(\n-m\n+valor\n )%0A\n+            elif tipo == %22s%22:%0A    \n     \n@@ -2410,17 +2410,21 @@\n segundo(\n-s\n+valor\n )%0A%0A     \n@@ -2480,12 +2480,20 @@\n xtSecond()%0A%0A\n+%0Amain()%0A\n",
            "lines": "95"
        },
        {
            "label": "2025-10-14_14-43-36",
            "content": "@@ -1,1117 +1,157 @@\n-# Seu objetivo %C3%A9 construtir uma C\n+c\n lass\n-e\n  Rel\n-%C3%B3gio %60Watch%60 que garanta que a hora, minuto e segundo sejam v%C3%A1lidos.%0A%0A# - Construtor%0A#   - O construtor deve receber 3 par%C3%A2metros, hora, minuto e segundo.%0A#   - Para fazer a inicializa%C3%A7%C3%A3o dos 3 par%C3%A2metros, utilize os m%C3%A9todos set.%0A# - Crie os m%C3%A9todos getters e setters para cada atributo.%0A#   - Os m%C3%A9todos set devem garantir que os valor atribu%C3%ADdo sempre seja v%C3%A1lido, ou n%C3%A3o realize nenhuma mudan%C3%A7a.%0A# - %60toString%60%0A#   - Crie um m%C3%A9todo que imprime a hora no formato HH:MM:SS.%0A#   - Voc%C3%AA precisar%C3%A1 pesquisar como formatar n%C3%BAmeros menores que 10 com 2 d%C3%ADgitos (ex: 01, 02, 03).%0A# - Nos m%C3%A9todos set, realize a valida%C3%A7%C3%A3o dos valores.%0A#   - Hora deve ser entre 0 e 23.%0A#   - Minuto e segundo devem ser entre 0 e 59.%0A# - Pr%C3%B3ximo Segundo %60nextSecond%60%0A#   - Crie um m%C3%A9todo nextSecond que incrementa o segundo em 1.%0A#   - Se o segundo for 59, ele deve ser zerado e o minuto incrementado.%0A#   - Se o minuto for 59, ele deve ser zerado e a hora incrementada.%0A#   - Se a hora for 23, ela deve ser zerada.%0A%0Aclass Relogio():%0A    def __init__(self, hora: int, minuto: int, segundo: int):\n+ogio:%0A    def __init__(self, hora: int, minuto: int, segundo: int):%0A        self.__hora = 0%0A        self.__minuto = 0%0A        self.__segundo = 0\n %0A   \n@@ -240,19 +240,16 @@\n segundo)\n-   \n %0A%0A    de\n@@ -288,20 +288,20 @@\n      if \n+0 \n %3C=\n- 0\n  hora %3C=\n@@ -335,17 +335,16 @@\n a = hora\n- \n %0A       \n@@ -341,33 +341,32 @@\n ra%0A        else:\n- \n %0A            pri\n@@ -367,19 +367,24 @@\n    print\n- \n (%22\n+fail: \n Hora inv\n@@ -414,17 +414,16 @@\n  0 e 23%22\n-.\n )%0A%0A    d\n@@ -467,20 +467,20 @@\n      if \n+0 \n %3C=\n- 0\n  minuto \n@@ -520,17 +520,16 @@\n = minuto\n- \n %0A       \n@@ -526,33 +526,32 @@\n to%0A        else:\n- \n %0A            pri\n@@ -552,19 +552,24 @@\n    print\n- \n (%22\n+fail: \n Minuto i\n@@ -593,33 +593,32 @@\n ar entre 0 e 59%22\n-.\n )%0A%0A    def set_s\n@@ -660,12 +660,12 @@\n  if \n+0 \n %3C=\n- 0\n  seg\n@@ -712,17 +712,16 @@\n  segundo\n- \n %0A       \n@@ -726,17 +726,16 @@\n    else:\n- \n %0A       \n@@ -748,11 +748,16 @@\n rint\n- \n (%22\n+fail: \n Segu\n@@ -794,17 +794,16 @@\n  0 e 59%22\n-.\n )%0A%0A    d\n@@ -848,20 +848,16 @@\n .__hora%0A\n-    \n %0A    def\n@@ -893,17 +893,17 @@\n turn sel\n-t\n+f\n .__minut\n@@ -963,25 +963,24 @@\n egundo%0A%0A\n-%0A\n     def \n __str__(\n@@ -963,39 +963,40 @@\n egundo%0A%0A    def \n-__str__\n+toString\n (self):%0A        \n@@ -1065,16 +1065,71 @@\n :02d%7D%22%0A%0A\n+    def __str__(self):%0A        return self.toString()%0A%0A\n     def \n@@ -1448,62 +1448,8 @@\n  0%0A%0A\n-    def __str__(self):%0A        return self.toString()%0A\n %0Adef\n@@ -1478,16 +1478,26 @@\n  Relogio\n+(0, 0, 0)%0A\n %0A    whi\n@@ -1527,16 +1527,24 @@\n  input()\n+.strip()\n %0A       \n@@ -1641,77 +1641,487 @@\n reak\n- %0A        elif args%5B0%5D == %22show%22:%0A            print(relogio)%0A    main\n+%0A%0A        elif args%5B0%5D == %22init%22:%0A            h, m, s = int(args%5B1%5D), int(args%5B2%5D), int(args%5B3%5D)%0A            relogio = Relogio(h, m, s)%0A%0A        elif args%5B0%5D == %22show%22:%0A            print(relogio)%0A%0A        elif args%5B0%5D == %22set%22:%0A            h = int(args%5B1%5D)%0A            m = int(args%5B2%5D)%0A            s = int(args%5B3%5D)%0A            relogio.set_hora(h)%0A            relogio.set_minuto(m)%0A            relogio.set_segundo(s)%0A%0A        elif args%5B0%5D == %22next%22:%0A            relogio.nextSecond\n ()%0A%0A\n",
            "lines": "83"
        },
        {
            "label": "2025-10-14_14-44-23",
            "content": "@@ -1041,16 +1041,18 @@\n  Relogio\n+()\n :%0A    de\n@@ -1111,156 +1111,8 @@\n t):%0A\n-        self.__hora = 0%0A        self.__minuto = 0%0A        self.__segundo = 0%0A%0A        # Inicializa%C3%A7%C3%A3o usando os m%C3%A9todos set (como o enunciado pede)%0A\n     \n@@ -1204,39 +1204,12 @@\n ndo)\n-%0A%0A\n    \n- # ===== M%C3%89TODOS SET =====\n+%0A\n %0A   \n@@ -1251,20 +1251,20 @@\n      if \n-0 \n %3C=\n+ 0\n  hora %3C=\n@@ -1298,16 +1298,17 @@\n a = hora\n+ \n %0A       \n@@ -1305,32 +1305,33 @@\n a %0A        else:\n+ \n %0A            pri\n@@ -1332,24 +1332,19 @@\n    print\n+ \n (%22\n-fail: \n Hora inv\n@@ -1374,16 +1374,17 @@\n  0 e 23%22\n+.\n )%0A%0A    d\n@@ -1428,20 +1428,20 @@\n      if \n-0 \n %3C=\n+ 0\n  minuto \n@@ -1481,16 +1481,17 @@\n = minuto\n+ \n %0A       \n@@ -1488,32 +1488,33 @@\n o %0A        else:\n+ \n %0A            pri\n@@ -1515,24 +1515,19 @@\n    print\n+ \n (%22\n-fail: \n Minuto i\n@@ -1555,24 +1555,25 @@\n ntre 0 e 59%22\n+.\n )%0A%0A    def s\n@@ -1619,12 +1619,12 @@\n  if \n-0 \n %3C=\n+ 0\n  seg\n@@ -1671,16 +1671,17 @@\n  segundo\n+ \n %0A       \n@@ -1686,16 +1686,17 @@\n    else:\n+ \n %0A       \n@@ -1709,16 +1709,11 @@\n rint\n+ \n (%22\n-fail: \n Segu\n@@ -1754,41 +1754,12 @@\n  59%22\n+.\n )%0A%0A\n-    # ===== M%C3%89TODOS GET =====%0A\n     \n@@ -1805,16 +1805,20 @@\n .__hora%0A\n+    \n %0A    def\n@@ -1850,25 +1850,25 @@\n   return sel\n-f\n+t\n .__minuto%0A%0A \n@@ -1928,34 +1928,8 @@\n do%0A%0A\n-    # ===== toString =====\n %0A   \n@@ -1937,24 +1937,23 @@\n def \n-toString\n+__str__\n (self):%0A\n     \n@@ -1952,58 +1952,8 @@\n f):%0A\n-        # Formata com dois d%C3%ADgitos (ex: 08:05:09)%0A\n     \n@@ -2030,97 +2030,8 @@\n %7D%22%0A%0A\n-    def __str__(self):%0A        return self.toString()%0A%0A    # ===== Pr%C3%B3ximo Segundo =====%0A\n     \n@@ -2354,45 +2354,62 @@\n  0%0A%0A\n-%0A# ===== C%C3%B3digo de Teste (main) =====\n+    def __str__(self):%0A        return self.toString()%0A\n %0Adef\n@@ -2442,18 +2442,8 @@\n ogio\n-(0, 0, 0)%0A\n %0A   \n@@ -2481,16 +2481,8 @@\n ut()\n-.strip()\n %0A   \n@@ -2583,144 +2583,9 @@\n reak\n-%0A%0A        elif args%5B0%5D == %22init%22:%0A            h, m, s = int(args%5B1%5D), int(args%5B2%5D), int(args%5B3%5D)%0A            relogio = Relogio(h, m, s)%0A\n+ \n %0A   \n@@ -2644,386 +2644,17 @@\n io)%0A\n-%0A  \n     \n-  elif args%5B0%5D == %22set%22:%0A            tipo = args%5B1%5D%0A            valor = int(args%5B2%5D)%0A            if tipo == %22h%22:%0A                relogio.set_hora(valor)%0A            elif tipo == %22m%22:%0A                relogio.set_minuto(valor)%0A            elif tipo == %22s%22:%0A                relogio.set_segundo(valor)%0A%0A        elif args%5B0%5D == %22next%22:%0A            relogio.nextSecond()%0A%0A%0A\n main()%0A%0A\n %0A\n@@ -2652,9 +2652,8 @@\n main()%0A%0A\n-%0A\n",
            "lines": "83"
        },
        {
            "label": "2025-10-14_14-44-58",
            "content": "@@ -3195,24 +3195,22 @@\n     \n-h = int(\n+tipo = \n args%5B1%5D\n-)\n %0A   \n@@ -3218,17 +3218,21 @@\n         \n-m\n+valor\n  = int(a\n@@ -3255,25 +3255,28 @@\n     \n-s = int(args%5B3%5D)%0A\n+if tipo == %22h%22:%0A    \n     \n@@ -3304,11 +3304,49 @@\n ora(\n-h\n+valor\n )%0A\n+            elif tipo == %22m%22:%0A    \n     \n@@ -3376,11 +3376,49 @@\n uto(\n-m\n+valor\n )%0A\n+            elif tipo == %22s%22:%0A    \n     \n@@ -3445,19 +3445,22 @@\n segundo(\n-s)%0A\n+valor)\n %0A%0A      \n",
            "lines": "116"
        },
        {
            "label": "2025-10-14_14-46-25",
            "content": "@@ -2906,16 +2906,8 @@\n ne%7D%22\n-, end=%22%22\n )%0A%0A \n",
            "lines": "115"
        },
        {
            "label": "2025-10-14_14-48-14",
            "content": "@@ -2902,16 +2902,24 @@\n $%7Bline%7D%22\n+, end=%22%22\n )%0A%0A     \n",
            "lines": "115"
        },
        {
            "label": "2025-10-14_14-48-23",
            "content": "@@ -2900,17 +2900,16 @@\n f%22$%7Bline\n- \n %7D%22)%0A%0A   \n",
            "lines": "115"
        },
        {
            "label": "2025-10-14_14-48-35",
            "content": "@@ -2800,17 +2800,16 @@\n (0, 0, 0\n- \n )%0A%0A    w\n@@ -2900,16 +2900,17 @@\n f%22$%7Bline\n+ \n %7D%22)%0A%0A   \n",
            "lines": "115"
        },
        {
            "label": "2025-10-14_14-49-00",
            "content": "@@ -1183,16 +1183,86 @@\n do = 0%0A%0A\n+        # Inicializa%C3%A7%C3%A3o usando os m%C3%A9todos set (como o enunciado pede)%0A\n         \n@@ -1344,24 +1344,54 @@\n o(segundo)%0A%0A\n+    # ===== M%C3%89TODOS SET =====%0A\n     def set_\n@@ -1925,32 +1925,62 @@\n entre 0 e 59%22)%0A%0A\n+    # ===== M%C3%89TODOS GET =====%0A\n     def get_hora\n@@ -2137,27 +2137,104 @@\n     \n-def toString(self):\n+# ===== toString =====%0A    def toString(self):%0A        # Formata com dois d%C3%ADgitos (ex: 08:05:09)\n %0A   \n@@ -2363,16 +2363,50 @@\n ring()%0A%0A\n+    # ===== Pr%C3%B3ximo Segundo =====%0A\n     def \n@@ -2722,16 +2722,53 @@\n a = 0%0A%0A%0A\n+# ===== C%C3%B3digo de Teste (main) =====%0A\n def main\n@@ -2800,16 +2800,17 @@\n (0, 0, 0\n+ \n )%0A%0A    w\n",
            "lines": "115"
        },
        {
            "label": "2025-10-14_14-49-51",
            "content": "@@ -1034,21 +1034,23 @@\n %0A%0Aclass \n-Watch\n+Relogio\n :%0A    de\n@@ -1126,16 +1126,26 @@\n __hora =\n+ 0%0A       \n  self.__\n@@ -1152,16 +1152,26 @@\n minuto =\n+ 0%0A       \n  self.__\n@@ -1178,24 +1178,25 @@\n segundo = 0%0A\n+%0A\n         self\n@@ -1302,16 +1302,19 @@\n (self, h\n+ora\n : int):%0A\n@@ -1334,15 +1334,30 @@\n %3C= h\n+ora\n  %3C= 23:\n+%0A           \n  sel\n@@ -1368,16 +1368,19 @@\n hora = h\n+ora\n %0A       \n@@ -1377,32 +1377,44 @@\n ra%0A        else:\n+%0A           \n  print(%22fail: Ho\n@@ -1479,16 +1479,21 @@\n (self, m\n+inuto\n : int):%0A\n@@ -1509,23 +1509,40 @@\n f 0 %3C= m\n+inuto\n  %3C= 59:\n+%0A           \n  self.__\n@@ -1551,16 +1551,21 @@\n nuto = m\n+inuto\n %0A       \n@@ -1562,32 +1562,44 @@\n to%0A        else:\n+%0A           \n  print(%22fail: Mi\n@@ -1667,16 +1667,22 @@\n (self, s\n+egundo\n : int):%0A\n@@ -1698,23 +1698,41 @@\n f 0 %3C= s\n+egundo\n  %3C= 59:\n+%0A           \n  self.__\n@@ -1742,16 +1742,22 @@\n undo = s\n+egundo\n %0A       \n@@ -1762,16 +1762,28 @@\n    else:\n+%0A           \n  print(%22\n@@ -1852,24 +1852,32 @@\n _hora(self):\n+%0A       \n  return self\n@@ -1880,24 +1880,25 @@\n self.__hora%0A\n+%0A\n     def get_\n@@ -1902,32 +1902,40 @@\n et_minuto(self):\n+%0A       \n  return self.__m\n@@ -1936,24 +1936,25 @@\n lf.__minuto%0A\n+%0A\n     def get_\n@@ -1963,24 +1963,32 @@\n gundo(self):\n+%0A       \n  return self\n@@ -2018,24 +2018,32 @@\n tring(self):\n+%0A       \n  return f%22%7Bs\n@@ -2100,16 +2100,17 @@\n o:02d%7D%22%0A\n+%0A\n     def \n@@ -2123,16 +2123,24 @@\n _(self):\n+%0A       \n  return \n@@ -2205,19 +2205,32 @@\n segundo \n++\n = \n-(\n+1%0A        if \n self.__s\n@@ -2236,34 +2236,33 @@\n segundo \n-+ 1) %25 60%0A\n+%3E 59:%0A   \n         \n if self.\n@@ -2245,34 +2245,32 @@\n  59:%0A           \n-if\n  self.__segundo \n@@ -2270,20 +2270,18 @@\n egundo =\n-=\n  0\n-:\n %0A       \n@@ -2299,19 +2299,36 @@\n _minuto \n++\n = \n-(\n+1%0A            if \n self.__m\n@@ -2337,17 +2337,13 @@\n uto \n-+ 1) %25 60\n+%3E 59:\n %0A   \n@@ -2343,34 +2343,35 @@\n 59:%0A            \n-if\n+   \n  self.__minuto =\n@@ -2374,12 +2374,10 @@\n to =\n-=\n  0\n-:\n %0A   \n@@ -2405,32 +2405,85 @@\n ora \n++\n = \n-(self.__hora + 1) %25 24\n+1%0A                if self.__hora %3E 23:%0A                    self.__hora = 0\n %0A%0A%0Ad\n@@ -2507,21 +2507,23 @@\n logio = \n-Watch\n+Relogio\n (0, 0, 0\n@@ -2524,16 +2524,17 @@\n , 0, 0)%0A\n+%0A\n     whil\n@@ -2659,15 +2659,28 @@\n nd%22:\n+%0A           \n  break%0A\n+%0A\n     \n@@ -2710,25 +2710,31 @@\n it%22:\n- relogio = Watch(\n+%0A            h, m, s = \n int(\n@@ -2761,33 +2761,72 @@\n %5D), int(args%5B3%5D)\n-)\n+%0A            relogio = Relogio(h, m, s)%0A\n %0A        elif ar\n@@ -2841,16 +2841,28 @@\n  %22show%22:\n+%0A           \n  print(r\n@@ -2869,16 +2869,17 @@\n elogio)%0A\n+%0A\n         \n@@ -2897,24 +2897,111 @@\n %5D == %22set%22:%0A\n+            h = int(args%5B1%5D)%0A            m = int(args%5B2%5D)%0A            s = int(args%5B3%5D)%0A\n             \n@@ -3017,28 +3017,17 @@\n et_hora(\n-int(args%5B1%5D)\n+h\n )%0A      \n@@ -3051,28 +3051,17 @@\n _minuto(\n-int(args%5B2%5D)\n+m\n )%0A      \n@@ -3090,21 +3090,12 @@\n ndo(\n-int(args%5B3%5D))\n+s)%0A%0A\n %0A   \n@@ -3122,16 +3122,28 @@\n  %22next%22:\n+%0A           \n  relogio\n@@ -3165,8 +3165,10 @@\n %0Amain()%0A\n+%0A%0A\n",
            "lines": "108"
        },
        {
            "label": "2025-10-15_01-44-18",
            "content": "@@ -2533,17 +2533,16 @@\n %22: print\n- \n (relogio\n",
            "lines": "71"
        },
        {
            "label": "2025-10-15_01-55-13",
            "content": "@@ -1069,16 +1069,19 @@\n f, h\n+ora\n : int, m\n : in\n@@ -1080,16 +1080,21 @@\n t, m\n+inuto\n : int, s\n : in\n@@ -1089,16 +1089,22 @@\n : int, s\n+egundo\n : int):%0A\n@@ -1183,18 +1183,28 @@\n t_hora(h\n-);\n+ora)%0A       \n  self.se\n@@ -1217,10 +1217,22 @@\n to(m\n-);\n+inuto)%0A       \n  sel\n@@ -1246,16 +1246,22 @@\n egundo(s\n+egundo\n )%0A%0A    d\n@@ -1848,15 +1848,16 @@\n def \n-__str__\n+toString\n (sel\n@@ -1928,16 +1928,62 @@\n do:02d%7D%22\n+%0A    def __str__(self): return self.toString()\n %0A%0A    de\n@@ -2025,20 +2025,43 @@\n segundo \n-+= 1\n+= (self.__segundo + 1) %25 60\n %0A       \n@@ -2078,25 +2078,24 @@\n _segundo == \n-6\n 0:%0A         \n@@ -2108,21 +2108,18 @@\n f.__\n-segund\n+minut\n o = \n-0; \n+(\n self\n@@ -2133,11 +2133,16 @@\n to +\n-=\n  1\n+) %25 60\n %0A   \n@@ -2170,17 +2170,16 @@\n nuto == \n-6\n 0:%0A     \n@@ -2192,27 +2192,8 @@\n     \n- \n-self.__minuto = 0;\n  sel\n@@ -2293,20 +2293,20 @@\n         \n-args\n+line\n  = input\n@@ -2308,16 +2308,44 @@\n input().\n+strip()%0A        args = line.\n split()%0A\n@@ -2366,22 +2366,12 @@\n f%22$%7B\n-' '.join(args)\n+line\n %7D%22)%0A\n@@ -2533,16 +2533,17 @@\n %22: print\n+ \n (relogio\n@@ -2771,9 +2771,8 @@\n %0Amain()%0A\n-%0A\n",
            "lines": "71"
        },
        {
            "label": "2025-10-15_01-56-44",
            "content": "@@ -2095,11 +2095,573 @@\n uto = 0;\n-%0A\n+ self.__hora = (self.__hora + 1) %25 24%0A%0A%0Adef main():%0A    relogio = Watch(0, 0, 0)%0A    while True:%0A        args = input().split()%0A        print(f%22$%7B' '.join(args)%7D%22)%0A%0A        if args%5B0%5D == %22end%22: break%0A        elif args%5B0%5D == %22init%22: relogio = Watch(int(args%5B1%5D), int(args%5B2%5D), int(args%5B3%5D))%0A        elif args%5B0%5D == %22show%22: print(relogio)%0A        elif args%5B0%5D == %22set%22:%0A            relogio.set_hora(int(args%5B1%5D))%0A            relogio.set_minuto(int(args%5B2%5D))%0A            relogio.set_segundo(int(args%5B3%5D))%0A        elif args%5B0%5D == %22next%22: relogio.nextSecond()%0A%0A%0Amain()\n %0A%0A\n",
            "lines": "68"
        },
        {
            "label": "2025-10-15_01-58-13",
            "content": "@@ -1034,23 +1034,21 @@\n %0A%0Aclass \n-Relogio\n+Watch\n :%0A    de\n@@ -1069,19 +1069,16 @@\n f, h\n-ora\n : int, m\n inut\n@@ -1077,21 +1077,16 @@\n t, m\n-inuto\n : int, s\n egun\n@@ -1081,22 +1081,16 @@\n : int, s\n-egundo\n : int):%0A\n@@ -1169,19 +1169,16 @@\n t_hora(h\n-ora\n ); self.\n@@ -1189,21 +1189,16 @@\n minuto(m\n-inuto\n ); self.\n@@ -1210,22 +1210,16 @@\n egundo(s\n-egundo\n )%0A%0A    d\n@@ -1237,19 +1237,16 @@\n (self, h\n-ora\n : int):%0A\n@@ -1262,19 +1262,16 @@\n f 0 %3C= h\n-ora\n  %3C= 23: \n@@ -1285,19 +1285,16 @@\n hora = h\n-ora\n %0A       \n@@ -1381,21 +1381,16 @@\n (self, m\n-inuto\n : int):%0A\n@@ -1406,21 +1406,16 @@\n f 0 %3C= m\n-inuto\n  %3C= 59: \n@@ -1431,21 +1431,16 @@\n nuto = m\n-inuto\n %0A       \n@@ -1530,22 +1530,16 @@\n (self, s\n-egundo\n : int):%0A\n@@ -1555,22 +1555,16 @@\n f 0 %3C= s\n-egundo\n  %3C= 59: \n@@ -1581,22 +1581,16 @@\n undo = s\n-egundo\n %0A       \n@@ -2099,600 +2099,7 @@\n = 0;\n- self.__hora = (self.__hora + 1) %25 24%0A%0A%0Adef main():%0A    relogio = Relogio(0, 0, 0)%0A    while True:%0A        args = input().split()%0A        print(f%22$%7B' '.join(args)%7D %22)  # %F0%9F%91%88 espa%C3%A7o corrigido aqui%0A%0A        if args%5B0%5D == %22end%22: break%0A        elif args%5B0%5D == %22init%22: relogio = Relogio(int(args%5B1%5D), int(args%5B2%5D), int(args%5B3%5D))%0A        elif args%5B0%5D == %22show%22: print(relogio)%0A        elif args%5B0%5D == %22set%22:%0A            relogio.set_hora(int(args%5B1%5D))%0A            relogio.set_minuto(int(args%5B2%5D))%0A            relogio.set_segundo(int(args%5B3%5D))%0A        elif args%5B0%5D == %22next%22: relogio.nextSecond()%0A%0A%0Amain()\n+%0A%0A\n %0A\n",
            "lines": "50"
        },
        {
            "label": "2025-10-15_01-59-38",
            "content": "@@ -2330,18 +2330,46 @@\n n(args)%7D\n+ \n %22)\n+  # %F0%9F%91%88 espa%C3%A7o corrigido aqui\n %0A%0A      \n",
            "lines": "67"
        },
        {
            "label": "2025-10-15_02-01-19",
            "content": "@@ -2330,17 +2330,16 @@\n n(args)%7D\n- \n %22)%0A%0A    \n",
            "lines": "67"
        },
        {
            "label": "2025-10-15_02-04-33",
            "content": "@@ -2334,11 +2334,9 @@\n gs)%7D\n-%22 %22\n+ \n %22)%0A%0A\n",
            "lines": "67"
        },
        {
            "label": "2025-10-15_02-04-53",
            "content": "@@ -2330,19 +2330,19 @@\n n(args)%7D\n-' '\n+%22 %22\n %22)%0A%0A    \n",
            "lines": "67"
        },
        {
            "label": "2025-10-15_02-05-03",
            "content": "@@ -2330,16 +2330,19 @@\n n(args)%7D\n+' '\n %22)%0A%0A    \n",
            "lines": "67"
        },
        {
            "label": "2025-10-15_02-05-11",
            "content": "@@ -2248,17 +2248,16 @@\n (0, 0, 0\n- \n )%0A    wh\n",
            "lines": "67"
        },
        {
            "label": "2025-10-15_02-05-21",
            "content": "@@ -2248,16 +2248,17 @@\n (0, 0, 0\n+ \n )%0A    wh\n",
            "lines": "67"
        },
        {
            "label": "2025-10-15_02-05-39",
            "content": "@@ -1105,16 +1105,73 @@\n : int):%0A\n+        self.__hora = self.__minuto = self.__segundo = 0%0A\n         \n@@ -1189,24 +1189,17 @@\n ra(hora)\n-%0A       \n+;\n  self.se\n@@ -1214,24 +1214,17 @@\n (minuto)\n-%0A       \n+;\n  self.se\n@@ -1267,17 +1267,86 @@\n (self, h\n-)\n+ora: int):%0A        if 0 %3C= hora %3C= 23: self.__hora = hora%0A        else\n : print(\n@@ -1356,111 +1356,154 @@\n il: \n-h\n+H\n ora inv\n-a\n+%C3%A1\n lida\n-%22) if not 0 %3C= h %3C= 23 else setattr(self, %22_Relogio__hora%22, h)%0A    def set_minuto(self, m)\n+! Deve estar entre 0 e 23%22)%0A%0A    def set_minuto(self, minuto: int):%0A        if 0 %3C= minuto %3C= 59: self.__minuto = minuto%0A        else\n : pr\n@@ -1513,17 +1513,17 @@\n (%22fail: \n-m\n+M\n inuto in\n@@ -1527,106 +1527,151 @@\n  inv\n-a\n+%C3%A1\n lido\n-%22) if not 0 %3C= m %3C= 59 else setattr(self, %22_Relogio__minuto%22, m)%0A    def set_segundo(self, s)\n+! Deve estar entre 0 e 59%22)%0A%0A    def set_segundo(self, segundo: int):%0A        if 0 %3C= segundo %3C= 59: self.__segundo = segundo%0A        else\n : pr\n@@ -1681,17 +1681,17 @@\n (%22fail: \n-s\n+S\n egundo i\n@@ -1696,78 +1696,180 @@\n  inv\n-a\n+%C3%A1\n lido\n-%22) if not 0 %3C= s %3C= 59 else setattr(self, %22_Relogio__segundo%22, s)\n+! Deve estar entre 0 e 59%22)%0A%0A    def get_hora(self): return self.__hora%0A    def get_minuto(self): return self.__minuto%0A    def get_segundo(self): return self.__segundo\n %0A%0A  \n@@ -2076,28 +2076,13 @@\n undo\n-, self.__minuto\n  = 0\n-,\n+;\n  sel\n@@ -2093,16 +2093,17 @@\n minuto +\n+=\n  1%0A     \n@@ -2162,17 +2162,21 @@\n __minuto\n-,\n+ = 0;\n  self.__\n@@ -2181,19 +2181,16 @@\n __hora =\n- 0,\n  (self._\n@@ -2333,16 +2333,17 @@\n rgs)%7D%22)%0A\n+%0A\n         \n@@ -2369,32 +2369,34 @@\n : break%0A        \n+el\n if args%5B0%5D == %22i\n@@ -2538,16 +2538,28 @@\n = %22set%22:\n+%0A           \n  relogio\n@@ -2581,17 +2581,28 @@\n rgs%5B1%5D))\n-;\n+%0A           \n  relogio\n@@ -2626,17 +2626,28 @@\n rgs%5B2%5D))\n-;\n+%0A           \n  relogio\n@@ -2727,15 +2727,16 @@\n cond()%0A%0A\n+%0A\n main()%0A\n",
            "lines": "67"
        },
        {
            "label": "2025-10-15_02-09-03",
            "content": "@@ -1985,20 +1985,20 @@\n         \n-line\n+args\n  = input\n@@ -1999,16 +1999,24 @@\n  input()\n+.split()\n %0A       \n@@ -2030,42 +2030,24 @@\n f%22$%7B\n-line%7D%22)%0A        args = line.split(\n+' '.join(args)%7D%22\n )%0A  \n",
            "lines": "51"
        },
        {
            "label": "2025-10-19_12-42-29",
            "content": "@@ -1,1922 +1,2418 @@\n-class Relogio:%0A    def __init__(self, hora: int = 0, minuto: int = 0, segundo: int = 0):%0A        self.__hora = hora %0A        self.__minuto = minuto %0A        self.__segundo = segundo %0A        self.set_hora(hora)%0A        self.set_minuto(minuto)%0A        self.set_segundo(segundo)%0A%0A    def imprimir_hora(self):%0A        return f%22%7Bself.hora:02%7D: %7Bself.__minuto:02%7D:%7Bself.__segundo:02%7D%22%0A%0A    def set_hora(self, hora: int = 0):%0A        if hora %3C 0 or hora %3E 23:%0A            print(%22fail: hora invalida%22)%0A            return %0A        self.__hora = hora %0A%0A    def set_minuto(self, minuto: int = 0):%0A        if minuto %3C 0 or minuto %3E 59:%0A            print(%22fail: minuto invalido%22) %0A            return%0A        self.__minuto = minuto%0A    %0A    def set_segundo(self, segundo: int = 0): %0A        if segundo %3C 0 or segundo %3E 59:%0A            print(%22fail: segundo invalido%22)%0A            return %0A        self.__segundo = segundo%0A%0A    def nextSecond(self):%0A        self.__segundo += 1%0A        if self.__segundo == 59:%0A            self.__segundo = 0%0A            self.__minuto += 1%0A%0A            if self.__minuto %3C= 59:%0A                self.__minuto = 0%0A                self.__hora = 1%0A%0A            if self.__hora %3C= 23:%0A                self.__minuto = 0%0A%0A    def get_hora(self) -%3E int: %0A        return self.__hora%0A    def get_minuto(self) -%3E int: %0A        return self.__minuto%0A    def get_segundo(self) -%3E int: %0A        return self.__segundo%0A    %0Adef main():%0A    relogio = Relogio%0A    while True:%0A        line = input()%0A        print(f%22$%7Bline%7D%22)%0A        args: list %5Bstr%5D = line.split(%22 %22)%0A        if args%5B0%5D == %22end%22: %0A            break%0A        elif args%5B0%5D == %22show%22: %0A            print(relogio.imprimir_hora())%0A        if args%5B0%5D == %22hora%22: %0A            relogio.set.__hora(int(args%5B1%5D))%0A            relogio.set.__minuto(int(args%5B2%5D))%0A            relogio.set.__segundo(int(args%5B3%5D))%0A        if args%5B0%5D == %22init%22:%0A            relogio = Relogio\n+# Seu objetivo %C3%A9 construtir uma Classe Rel%C3%B3gio %60Watch%60 que garanta que a hora, minuto e segundo sejam v%C3%A1lidos.%0A%0A# - Construtor%0A#   - O construtor deve receber 3 par%C3%A2metros, hora, minuto e segundo.%0A#   - Para fazer a inicializa%C3%A7%C3%A3o dos 3 par%C3%A2metros, utilize os m%C3%A9todos set.%0A# - Crie os m%C3%A9todos getters e setters para cada atributo.%0A#   - Os m%C3%A9todos set devem garantir que os valor atribu%C3%ADdo sempre seja v%C3%A1lido, ou n%C3%A3o realize nenhuma mudan%C3%A7a.%0A# - %60toString%60%0A#   - Crie um m%C3%A9todo que imprime a hora no formato HH:MM:SS.%0A#   - Voc%C3%AA precisar%C3%A1 pesquisar como formatar n%C3%BAmeros menores que 10 com 2 d%C3%ADgitos (ex: 01, 02, 03).%0A# - Nos m%C3%A9todos set, realize a valida%C3%A7%C3%A3o dos valores.%0A#   - Hora deve ser entre 0 e 23.%0A#   - Minuto e segundo devem ser entre 0 e 59.%0A# - Pr%C3%B3ximo Segundo %60nextSecond%60%0A#   - Crie um m%C3%A9todo nextSecond que incrementa o segundo em 1.%0A#   - Se o segundo for 59, ele deve ser zerado e o minuto incrementado.%0A#   - Se o minuto for 59, ele deve ser zerado e a hora incrementada.%0A#   - Se a hora for 23, ela deve ser zerada.%0A%0Aclass Relogio:%0A    def __init__(self, hora: int, minuto: int, segundo: int):%0A        self.set_hora(hora)%0A        self.set_minuto(minuto)%0A        self.set_segundo(segundo)%0A%0A    def set_hora(self, h): print(%22fail: hora invalida%22) if not 0 %3C= h %3C= 23 else setattr(self, %22_Relogio__hora%22, h)%0A    def set_minuto(self, m): print(%22fail: minuto invalido%22) if not 0 %3C= m %3C= 59 else setattr(self, %22_Relogio__minuto%22, m)%0A    def set_segundo(self, s): print(%22fail: segundo invalido%22) if not 0 %3C= s %3C= 59 else setattr(self, %22_Relogio__segundo%22, s)%0A%0A    def __str__(self): return f%22%7Bself.__hora:02d%7D:%7Bself.__minuto:02d%7D:%7Bself.__segundo:02d%7D%22%0A%0A    def nextSecond(self):%0A        self.__segundo += 1%0A        if self.__segundo == 60:%0A            self.__segundo, self.__minuto = 0, self.__minuto + 1%0A            if self.__minuto == 60:%0A                self.__minuto, self.__hora = 0, (self.__hora + 1) %25 24%0A%0A%0Adef main():%0A    relogio = Relogio(0, 0, 0)%0A    while True:%0A        line = input()%0A        print(f%22$%7Bline%7D%22)%0A        args = line.split()%0A        if args%5B0%5D == %22end%22: break%0A        if args%5B0%5D == %22init%22: relogio = Relogio(int(args%5B1%5D), int(args%5B2%5D), int(args%5B3%5D))%0A        elif args%5B0%5D == %22show%22: print(relogio)%0A        elif args%5B0%5D == %22set%22: relogio.set_hora(int(args%5B1%5D)); relogio.set_minuto(int(args%5B2%5D)); relogio.set_segundo(int(args%5B3%5D))%0A        elif args%5B0%5D == %22next%22: relogio.nextSecond\n ()%0A%0A\n",
            "lines": "52"
        },
        {
            "label": "2025-10-19_14-00-41",
            "content": "@@ -273,85 +273,8 @@\n ndo)\n-%0A        self.__hora = 0%0A        self.__minuto = 0%0A        self.__segundo = 0\n %0A%0A  \n@@ -1076,25 +1076,26 @@\n lf.__minuto \n-%3E\n+%3C=\n  59:%0A       \n@@ -1177,25 +1177,26 @@\n self.__hora \n-%3E\n+%3C=\n  23:%0A       \n@@ -1890,25 +1890,24 @@\n             \n- \n relogio = Re\n@@ -1916,49 +1916,8 @@\n gio(\n-int(args%5B1%5D), int(args%5B2%5D) , int(args%5B3%5D)\n )%0A%0Am\n",
            "lines": "68"
        },
        {
            "label": "2025-10-19_14-05-41",
            "content": "@@ -1748,24 +1748,26 @@\n mprimir_hora\n+()\n )%0A        if\n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-02-18",
            "content": "@@ -1752,18 +1752,16 @@\n mir_hora\n-()\n )%0A      \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-06-27",
            "content": "@@ -1748,24 +1748,26 @@\n mprimir_hora\n+()\n )%0A        if\n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-06-49",
            "content": "@@ -1731,16 +1731,24 @@\n   print(\n+relogio.\n imprimir\n@@ -1752,18 +1752,16 @@\n mir_hora\n-()\n )%0A      \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-07-45",
            "content": "@@ -203,20 +203,16 @@\n ra(hora)\n- = 0\n %0A       \n@@ -235,20 +235,16 @@\n (minuto)\n- = 0\n %0A       \n@@ -269,16 +269,89 @@\n segundo)\n+%0A        self.__hora = 0%0A        self.__minuto = 0%0A        self.__segundo\n  = 0%0A%0A  \n@@ -1050,33 +1050,34 @@\n  self.__segundo \n-%3E\n+==\n  59:%0A           \n@@ -1709,24 +1709,24 @@\n == %22show%22: %0A\n+\n             \n@@ -1731,24 +1731,16 @@\n   print(\n-relogio.\n imprimir\n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-13-03",
            "content": "@@ -204,16 +204,19 @@\n a(hora) \n+= 0\n %0A       \n@@ -240,16 +240,19 @@\n minuto) \n+= 0\n %0A       \n@@ -281,88 +281,12 @@\n ndo)\n-%0A        self.__hora = 0 %0A        self.__minuto = 0 %0A        self.__segundo = 0 \n+ = 0\n %0A%0A  \n",
            "lines": "68"
        },
        {
            "label": "2025-10-19_15-13-51",
            "content": "@@ -1761,33 +1761,8 @@\n ora(\n-%7Bhora%7D,%7Bminuto%7D,%7Bsegundo%7D\n ))%0A \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-14-23",
            "content": "@@ -1756,16 +1756,43 @@\n mir_hora\n+(%7Bhora%7D,%7Bminuto%7D,%7Bsegundo%7D)\n )%0A      \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-14-58",
            "content": "@@ -104,17 +104,21 @@\n _hora = \n-0\n+hora \n %0A       \n@@ -126,33 +126,39 @@\n self.__minuto = \n-0\n+minuto \n %0A        self.__\n@@ -159,33 +159,40 @@\n elf.__segundo = \n-0\n+segundo \n %0A        self.se\n@@ -203,16 +203,17 @@\n ra(hora)\n+ \n %0A       \n@@ -236,16 +236,17 @@\n (minuto)\n+ \n %0A       \n@@ -271,16 +271,96 @@\n segundo)\n+%0A        self.__hora = 0 %0A        self.__minuto = 0 %0A        self.__segundo = 0 \n %0A%0A    de\n@@ -401,26 +401,24 @@\n urn f%22%7Bself.\n-__\n hora:02%7D:%7Bse\n@@ -410,24 +410,25 @@\n lf.hora:02%7D:\n+ \n %7Bself.__minu\n@@ -510,20 +510,26 @@\n  if \n-0 %3C=\n+hora %3C 0 or\n  hora \n-%3C=\n+%3E\n  23:\n@@ -545,81 +545,84 @@\n     \n-self.__hora = hora%0A        else:%0A            print(%22fail: hora invalida%22)\n+print(%22fail: hora invalida%22)%0A            return %0A        self.__hora = hora \n %0A%0A  \n@@ -677,20 +677,29 @@\n  if \n-0 %3C=\n+minuto %3C 0 or\n  minuto \n %3C= 5\n@@ -694,18 +694,17 @@\n  minuto \n-%3C=\n+%3E\n  59:%0A   \n@@ -716,88 +716,94 @@\n     \n-self.__minuto = minuto%0A        else:%0A            print(%22fail: minuto invalido%22)%0A\n+print(%22fail: minuto invalido%22) %0A            return%0A        self.__minuto = minuto%0A    \n %0A   \n@@ -835,32 +835,33 @@\n gundo: int = 0):\n+ \n %0A        if 0 %3C=\n@@ -860,12 +860,22 @@\n  if \n-0 %3C=\n+segundo %3C 0 or\n  seg\n@@ -883,10 +883,9 @@\n ndo \n-%3C=\n+%3E\n  59:\n@@ -901,90 +901,92 @@\n     \n-self.__segundo = segundo%0A        else:%0A            print(%22fail: segundo invalido%22)\n+print(%22fail: segundo invalido%22)%0A            return %0A        self.__segundo = segundo\n %0A%0A  \n@@ -1127,24 +1127,25 @@\n minuto += 1%0A\n+%0A\n             \n@@ -1229,25 +1229,21 @@\n .__hora \n-+\n = 1%0A\n-    \n+%0A\n         \n@@ -1279,39 +1279,37 @@\n             \n-    \n self.__\n-hora\n+minuto\n  = 0%0A%0A    de\n@@ -1324,32 +1324,33 @@\n ra(self) -%3E int:\n+ \n %0A        return \n@@ -1361,17 +1361,16 @@\n .__hora%0A\n-%0A\n     def \n@@ -1385,32 +1385,33 @@\n to(self) -%3E int:\n+ \n %0A        return \n@@ -1424,17 +1424,16 @@\n _minuto%0A\n-%0A\n     def \n@@ -1457,16 +1457,17 @@\n  -%3E int:\n+ \n %0A       \n@@ -1489,17 +1489,20 @@\n segundo%0A\n-%0A\n+    \n %0Adef mai\n@@ -1524,12 +1524,15 @@\n o = \n-None\n+Relogio\n %0A   \n@@ -1605,16 +1605,28 @@\n     args\n+: list %5Bstr%5D\n  = line.\n@@ -1631,18 +1631,20 @@\n e.split(\n+%22 %22\n )\n-%0A\n %0A       \n@@ -1664,16 +1664,17 @@\n = %22end%22:\n+ \n %0A       \n@@ -1688,114 +1688,8 @@\n eak%0A\n-%0A        elif args%5B0%5D == %22init%22:%0A            relogio = Relogio(int(args%5B1%5D), int(args%5B2%5D), int(args%5B3%5D))%0A%0A\n     \n@@ -1715,16 +1715,17 @@\n  %22show%22:\n+ \n %0A       \n@@ -1760,12 +1760,9 @@\n hora\n-())%0A\n+)\n %0A   \n@@ -1758,34 +1758,32 @@\n r_hora)%0A        \n-el\n if args%5B0%5D == %22h\n@@ -1787,16 +1787,17 @@\n  %22hora%22:\n+ \n %0A       \n@@ -1808,24 +1808,26 @@\n  relogio.set\n+._\n _hora(int(ar\n@@ -1853,24 +1853,26 @@\n  relogio.set\n+._\n _minuto(int(\n@@ -1900,24 +1900,26 @@\n  relogio.set\n+._\n _segundo(int\n@@ -1929,25 +1929,24 @@\n gs%5B3%5D))%0A\n-%0A\n         \n elif arg\n@@ -1929,34 +1929,32 @@\n gs%5B3%5D))%0A        \n-el\n if args%5B0%5D == %22n\n@@ -1956,15 +1956,16 @@\n == %22\n-nex\n+ini\n t%22:%0A\n+ \n     \n@@ -1983,20 +1983,60 @@\n ogio\n-.nextSecond(\n+ = Relogio(int(args%5B1%5D), int(args%5B2%5D) , int(args%5B3%5D)\n )%0A%0Am\n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-23-21",
            "content": "@@ -86,72 +86,8 @@\n 0):%0A\n-        # inicializa com 0 e depois usa os setters para validar%0A\n     \n@@ -159,17 +159,16 @@\n ndo = 0%0A\n-%0A\n         \n@@ -258,61 +258,8 @@\n o)%0A%0A\n-    # m%C3%A9todo toString (equivalente ao imprimir_hora)%0A\n     \n@@ -362,36 +362,8 @@\n %7D%22%0A%0A\n-    # setters com valida%C3%A7%C3%A3o%0A\n     \n@@ -451,24 +451,79 @@\n _hora = hora\n+%0A        else:%0A            print(%22fail: hora invalida%22)\n %0A%0A    def se\n@@ -615,24 +615,81 @@\n uto = minuto\n+%0A        else:%0A            print(%22fail: minuto invalido%22)\n %0A%0A    def se\n@@ -795,248 +795,66 @@\n ndo%0A\n-%0A\n     \n-# getters%0A    def get_hora(self) -%3E int:%0A        return self.__hora%0A%0A    def get_minuto(self) -%3E int:%0A        return self.__minuto%0A%0A    def get_segundo(self) -%3E int:%0A        return self.__segundo%0A%0A    # m%C3%A9todo que incrementa um segundo\n+    else:%0A            print(%22fail: segundo invalido%22)%0A\n %0A   \n@@ -1174,16 +1174,203 @@\n ra = 0%0A%0A\n+    def get_hora(self) -%3E int:%0A        return self.__hora%0A%0A    def get_minuto(self) -%3E int:%0A        return self.__minuto%0A%0A    def get_segundo(self) -%3E int:%0A        return self.__segundo%0A%0A\n %0Adef mai\n@@ -1741,19 +1741,20 @@\n %5B0%5D == %22\n-set\n+hora\n %22:%0A     \n@@ -1949,16 +1949,15 @@\n cond()%0A%0A\n-%0A\n main()%0A\n",
            "lines": "76"
        },
        {
            "label": "2025-10-19_15-24-42",
            "content": "@@ -74,32 +74,96 @@\n undo: int = 0):%0A\n+        # inicializa com 0 e depois usa os setters para validar%0A\n         self.__h\n@@ -168,21 +168,17 @@\n _hora = \n-hora \n+0\n %0A       \n@@ -194,23 +194,17 @@\n inuto = \n-minuto \n+0\n %0A       \n@@ -221,24 +221,18 @@\n gundo = \n-segundo \n+0%0A\n %0A       \n@@ -251,17 +251,16 @@\n ra(hora)\n- \n %0A       \n@@ -283,17 +283,16 @@\n (minuto)\n- \n %0A       \n@@ -322,88 +322,61 @@\n do)%0A\n+%0A\n     \n-    self.__hora = 0 %0A        self.__minuto = 0 %0A        self.__segundo = 0 %0A\n+# m%C3%A9todo toString (equivalente ao imprimir_hora)\n %0A   \n@@ -424,16 +424,18 @@\n f%22%7Bself.\n+__\n hora:02%7D\n@@ -435,17 +435,16 @@\n ora:02%7D:\n- \n %7Bself.__\n@@ -476,16 +476,44 @@\n o:02%7D%22%0A%0A\n+    # setters com valida%C3%A7%C3%A3o%0A\n     def \n@@ -558,26 +558,20 @@\n  if \n-hora %3C 0 or\n+0 %3C=\n  hora \n-%3E\n+%3C=\n  23:\n@@ -579,65 +579,8 @@\n     \n-        print(%22fail: hora invalida%22)%0A            return %0A\n     \n@@ -601,17 +601,16 @@\n a = hora\n- \n %0A%0A    de\n@@ -661,29 +661,20 @@\n  if \n-minuto %3C 0 or\n+0 %3C=\n  minuto \n %3E 59\n@@ -665,25 +665,26 @@\n 0 %3C= minuto \n-%3E\n+%3C=\n  59:%0A       \n@@ -684,67 +684,8 @@\n     \n-        print(%22fail: minuto invalido%22) %0A            return%0A\n     \n@@ -711,20 +711,16 @@\n  minuto%0A\n-    \n %0A    def\n@@ -756,17 +756,16 @@\n nt = 0):\n- \n %0A       \n@@ -767,16 +767,21 @@\n       if\n+ 0 %3C=\n  segundo\n@@ -786,91 +786,221 @@\n do %3C\n- 0 or segundo %3E 59:%0A            print(%22fail: segundo invalido%22)%0A            return \n+= 59:%0A            self.__segundo = segundo%0A%0A    # getters%0A    def get_hora(self) -%3E int:%0A        return self.__hora%0A%0A    def get_minuto(self) -%3E int:%0A        return self.__minuto%0A%0A    def get_segundo(self) -%3E int:\n %0A   \n@@ -996,32 +996,39 @@\n -%3E int:%0A        \n+return \n self.__segundo =\n@@ -1017,34 +1017,64 @@\n n self.__segundo\n- =\n+%0A%0A    # m%C3%A9todo que incrementa um\n  segundo%0A%0A    de\n@@ -1062,25 +1062,24 @@\n  um segundo%0A\n-%0A\n     def next\n@@ -1210,25 +1210,24 @@\n minuto += 1%0A\n-%0A\n             \n@@ -1315,13 +1315,17 @@\n ora \n++\n = 1%0A\n-%0A\n+    \n     \n@@ -1373,218 +1373,29 @@\n     \n-self.__minuto = 0%0A%0A    def get_hora(self) -%3E int: %0A        return self.__hora%0A    def get_minuto(self) -%3E int: %0A        return self.__minuto%0A    def get_segundo(self) -%3E int: %0A        return self.__segundo%0A    \n+    self.__hora = 0%0A%0A\n %0Adef\n@@ -1417,23 +1417,20 @@\n logio = \n-Relogio\n+None\n %0A    whi\n@@ -1503,20 +1503,8 @@\n args\n-: list %5Bstr%5D\n  = l\n@@ -1517,12 +1517,10 @@\n lit(\n-%22 %22\n )\n+%0A\n %0A   \n@@ -1544,17 +1544,16 @@\n = %22end%22:\n- \n %0A       \n@@ -1563,16 +1563,122 @@\n   break%0A\n+%0A        elif args%5B0%5D == %22init%22:%0A            relogio = Relogio(int(args%5B1%5D), int(args%5B2%5D), int(args%5B3%5D))%0A%0A\n         \n@@ -1700,17 +1700,16 @@\n  %22show%22:\n- \n %0A       \n@@ -1744,24 +1744,25 @@\n hora())%0A\n+%0A\n         \n if args%5B\n@@ -1745,32 +1745,34 @@\n ora())%0A%0A        \n+el\n if args%5B0%5D == %22h\n@@ -1774,15 +1774,13 @@\n == %22\n-hora\n+set\n %22:\n- \n %0A   \n@@ -1799,18 +1799,16 @@\n ogio.set\n-._\n _hora(in\n@@ -1842,18 +1842,16 @@\n ogio.set\n-._\n _minuto(\n@@ -1887,18 +1887,16 @@\n ogio.set\n-._\n _segundo\n@@ -1910,24 +1910,25 @@\n gs%5B3%5D))%0A\n+%0A\n         \n if args%5B\n@@ -1911,32 +1911,34 @@\n s%5B3%5D))%0A%0A        \n+el\n if args%5B0%5D == %22i\n@@ -1932,32 +1932,31 @@\n args%5B0%5D == %22\n-ini\n+nex\n t%22:%0A\n- \n             \n@@ -1966,61 +1966,22 @@\n ogio\n- = Relogio(int(args%5B1%5D), int(args%5B2%5D) , int(args%5B3%5D))\n+.nextSecond()%0A\n %0A%0Ama\n",
            "lines": "77"
        },
        {
            "label": "2025-10-19_15-25-18",
            "content": "@@ -1757,20 +1757,16 @@\n ir_hora(\n-self\n ))%0A     \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-25-40",
            "content": "@@ -1735,17 +1735,17 @@\n   print(\n-R\n+r\n elogio.i\n@@ -1757,16 +1757,20 @@\n ir_hora(\n+self\n ))%0A     \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-26-11",
            "content": "@@ -1735,17 +1735,17 @@\n   print(\n-r\n+R\n elogio.i\n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-26-17",
            "content": "@@ -1756,16 +1756,18 @@\n mir_hora\n+()\n )%0A      \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-26-48",
            "content": "@@ -1756,18 +1756,16 @@\n mir_hora\n-()\n )%0A      \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-30-43",
            "content": "@@ -365,15 +365,21 @@\n def \n-__str__\n+imprimir_hora\n (sel\n@@ -1742,16 +1742,32 @@\n (relogio\n+.imprimir_hora()\n )%0A      \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-32-55",
            "content": "@@ -404,24 +404,25 @@\n lf.hora:02%7D:\n+ \n %7Bself.__minu\n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-34-35",
            "content": "@@ -1520,18 +1520,16 @@\n  Relogio\n-()\n %0A    whi\n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-35-14",
            "content": "@@ -1510,18 +1510,16 @@\n  relogio\n-()\n  = Relog\n@@ -1520,16 +1520,18 @@\n  Relogio\n+()\n %0A    whi\n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-35-31",
            "content": "@@ -1502,32 +1502,34 @@\n n():%0A    relogio\n+()\n  = Relogio()%0A   \n@@ -1522,18 +1522,16 @@\n  Relogio\n-()\n %0A    whi\n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-35-54",
            "content": "@@ -25,24 +25,74 @@\n _init__(self\n+, hora: int = 0, minuto: int = 0, segundo: int = 0\n ):%0A        s\n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-36-24",
            "content": "@@ -33,58 +33,8 @@\n self\n-, hora: int = 0, minuto: int = 0, segundo: int = 0\n ):%0A \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-36-32",
            "content": "@@ -395,26 +395,24 @@\n urn f%22%7Bself.\n-__\n hora:02%7D:%7Bse\n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-37-28",
            "content": "@@ -1797,16 +1797,17 @@\n io.set._\n+_\n hora(int\n@@ -1842,16 +1842,17 @@\n io.set._\n+_\n minuto(i\n@@ -1889,16 +1889,17 @@\n io.set._\n+_\n segundo(\n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-40-58",
            "content": "@@ -1791,24 +1791,25 @@\n  relogio.set\n+.\n _hora(int(ar\n@@ -1835,24 +1835,25 @@\n  relogio.set\n+.\n _minuto(int(\n@@ -1881,24 +1881,25 @@\n  relogio.set\n+.\n _segundo(int\n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-41-59",
            "content": "@@ -1741,34 +1741,32 @@\n elogio)%0A        \n-el\n if args%5B0%5D == %22h\n@@ -1906,34 +1906,32 @@\n gs%5B3%5D))%0A        \n-el\n if args%5B0%5D == %22i\n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-43-15",
            "content": "@@ -1766,19 +1766,20 @@\n %5B0%5D == %22\n-set\n+hora\n %22: %0A    \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-47-33",
            "content": "@@ -875,17 +875,16 @@\n egundo %3E\n-=\n  59:%0A   \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-52-51",
            "content": "@@ -867,32 +867,33 @@\n %3C 0 or segundo %3E\n+=\n  59:%0A           \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-53-16",
            "content": "@@ -1224,17 +1224,16 @@\n .__hora \n-+\n = 1%0A%0A   \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-55-06",
            "content": "@@ -978,17 +978,16 @@\n egundo%0A%0A\n-%0A\n     def \n@@ -1234,36 +1234,32 @@\n  1%0A%0A            \n-    \n if self.__hora %3E\n@@ -1283,30 +1283,27 @@\n     \n-    \n self.__\n-hora\n+minuto\n  = 0%0A%0A\n-%0A\n     \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_15-56-44",
            "content": "@@ -978,16 +978,17 @@\n egundo%0A%0A\n+%0A\n     def \n@@ -1123,24 +1123,25 @@\n minuto += 1%0A\n+%0A\n             \n@@ -1226,24 +1226,25 @@\n __hora += 1%0A\n+%0A\n             \n@@ -1260,32 +1260,32 @@\n lf.__hora %3E 23:%0A\n+\n                 \n@@ -1306,17 +1306,16 @@\n a = 0%0A%0A%0A\n-%0A\n     def \n",
            "lines": "73"
        },
        {
            "label": "2025-10-19_15-58-04",
            "content": "@@ -1303,16 +1303,17 @@\n a = 0%0A%0A%0A\n+%0A\n     def \n@@ -1918,79 +1918,8 @@\n %5D))%0A\n-        elif args%5B0%5D == %22next%22:%0A           print(relogio.nextSecond())%0A\n     \n",
            "lines": "71"
        },
        {
            "label": "2025-10-19_16-02-59",
            "content": "@@ -1223,16 +1223,17 @@\n .__hora \n++\n = 1%0A    \n",
            "lines": "72"
        },
        {
            "label": "2025-10-19_16-04-43",
            "content": "@@ -1223,17 +1223,16 @@\n .__hora \n-+\n = 1%0A    \n@@ -1947,33 +1947,38 @@\n xt%22:%0A           \n- \n+print(\n relogio.nextSeco\n@@ -1981,16 +1981,17 @@\n Second()\n+)\n %0A       \n",
            "lines": "72"
        },
        {
            "label": "2025-10-19_16-08-16",
            "content": "@@ -104,17 +104,21 @@\n _hora = \n-0\n+hora \n %0A       \n@@ -134,17 +134,22 @@\n inuto = \n-0\n+minuto\n  %0A      \n@@ -159,33 +159,40 @@\n elf.__segundo = \n-0\n+segundo \n %0A        self.se\n@@ -271,16 +271,96 @@\n segundo)\n+%0A        self.__hora = 0 %0A        self.__minuto = 0 %0A        self.__segundo = 0 \n %0A%0A    de\n",
            "lines": "72"
        },
        {
            "label": "2025-10-19_16-14-42",
            "content": "class Relogio:\n    def __init__(self, hora: int = 0, minuto: int = 0, segundo: int = 0):\n        self.__hora = 0\n        self.__minuto = 0 \n        self.__segundo = 0\n        self.set_hora(hora) \n        self.set_minuto(minuto) \n        self.set_segundo(segundo)\n\n    def __str__(self):\n        return f\"{self.__hora:02}:{self.__minuto:02}:{self.__segundo:02}\"\n\n    def set_hora(self, hora: int = 0):\n        if hora < 0 or hora > 23:\n            print(\"fail: hora invalida\")\n            return \n        self.__hora = hora \n\n    def set_minuto(self, minuto: int = 0):\n        if minuto < 0 or minuto > 59:\n            print(\"fail: minuto invalido\") \n            return\n        self.__minuto = minuto\n    \n    def set_segundo(self, segundo: int = 0): \n        if segundo < 0 or segundo > 59:\n            print(\"fail: segundo invalido\")\n            return \n        self.__segundo = segundo\n\n    def nextSecond(self):\n        self.__segundo += 1\n        if self.__segundo > 59:\n            self.__segundo = 0\n            self.__minuto += 1\n            if self.__minuto > 59:\n                self.__minuto = 0\n                self.__hora += 1\n                if self.__hora > 23:\n                    self.__hora = 0\n\n\n    def get_hora(self) -> int: \n        return self.__hora\n    def get_minuto(self) -> int: \n        return self.__minuto\n    def get_segundo(self) -> int: \n        return self.__segundo\n    \ndef main():\n    relogio = Relogio()\n    while True:\n        line = input()\n        print(f\"${line}\")\n        args: list [str] = line.split(\" \")\n        if args[0] == \"end\": \n            break\n        elif args[0] == \"show\": \n            print(relogio)\n        elif args[0] == \"set\": \n            relogio.set_hora(int(args[1]))\n            relogio.set_minuto(int(args[2]))\n            relogio.set_segundo(int(args[3]))\n        elif args[0] == \"next\":\n            relogio.nextSecond()\n        elif args[0] == \"init\":\n             relogio = Relogio(int(args[1]), int(args[2]) , int(args[3]))\n\nmain()\n",
            "lines": "69"
        }
    ]
}