{
    "patches": [
        {
            "label": "2025-10-14_13-32-20",
            "content": "@@ -1,2642 +0,0 @@\n-# Seu objetivo %C3%A9 construtir uma Classe Rel%C3%B3gio %60Watch%60 que garanta que a hora, minuto e segundo sejam v%C3%A1lidos.%0A%0A# - Construtor%0A#   - O construtor deve receber 3 par%C3%A2metros, hora, minuto e segundo.%0A#   - Para fazer a inicializa%C3%A7%C3%A3o dos 3 par%C3%A2metros, utilize os m%C3%A9todos set.%0A# - Crie os m%C3%A9todos getters e setters para cada atributo.%0A#   - Os m%C3%A9todos set devem garantir que os valor atribu%C3%ADdo sempre seja v%C3%A1lido, ou n%C3%A3o realize nenhuma mudan%C3%A7a.%0A# - %60toString%60%0A#   - Crie um m%C3%A9todo que imprime a hora no formato HH:MM:SS.%0A#   - Voc%C3%AA precisar%C3%A1 pesquisar como formatar n%C3%BAmeros menores que 10 com 2 d%C3%ADgitos (ex: 01, 02, 03).%0A# - Nos m%C3%A9todos set, realize a valida%C3%A7%C3%A3o dos valores.%0A#   - Hora deve ser entre 0 e 23.%0A#   - Minuto e segundo devem ser entre 0 e 59.%0A# - Pr%C3%B3ximo Segundo %60nextSecond%60%0A#   - Crie um m%C3%A9todo nextSecond que incrementa o segundo em 1.%0A#   - Se o segundo for 59, ele deve ser zerado e o minuto incrementado.%0A#   - Se o minuto for 59, ele deve ser zerado e a hora incrementada.%0A#   - Se a hora for 23, ela deve ser zerada.%0A%0Aclass Relogio():%0A    def __init__(self, hora: int, minuto: int, segundo: int):%0A        self.set_hora(hora)%0A        self.set_minuto(minuto)%0A        self.set_segundo(segundo)   %0A%0A    def set_hora(self, hora: int):%0A        if %3C= 0 hora %3C= 23:%0A            self.__hora = hora %0A        else: %0A            print (%22Hora inv%C3%A1lida! Deve estar entre 0 e 23%22.)%0A%0A    def set_minuto(self, minuto: int):%0A        if %3C= 0 minuto %3C= 59:%0A            self.__minuto = minuto %0A        else: %0A            print (%22Minuto inv%C3%A1lido! Deve estar entre 0 e 59%22.)%0A%0A    def set_segundo(self, segundo: int):%0A        if %3C= 0 segundo %3C= 59:%0A            self.__segundo = segundo %0A        else: %0A            print (%22Segundo inv%C3%A1lido! Deve estar entre 0 e 59%22.)%0A%0A    def get_hora(self):%0A        return self.__hora%0A    %0A    def get_minuto(self):%0A        return selt.__minuto%0A%0A    def get_segundo(self):%0A        return self.__segundo%0A%0A%0A    def __str__(self):%0A        return f%22%7Bself.__hora:02d%7D:%7Bself.__minuto:02d%7D:%7Bself.__segundo:02d%7D%22%0A%0A    def nextSecond(self):%0A        self.__segundo += 1%0A        if self.__segundo %3E 59:%0A            self.__segundo = 0%0A            self.__minuto += 1%0A            if self.__minuto %3E 59:%0A                self.__minuto = 0%0A                self.__hora += 1%0A                if self.__hora %3E 23:%0A                    self.__hora = 0%0A%0A    def __str__(self):%0A        return self.toString()%0A%0Adef main():%0A    relogio = Watch(23, 59, 58)%0A    print(%22Hora atual:%22, relogio)%0A%0A    relogio.nextSecond()%0A    print(%22Depois de 1 segundo:%22, relogio)%0A%0A    relogio.nextSecond()%0A    print(%22Depois de 2 segundos:%22, relogio)%0A%0A    main()%0A%0A\n",
            "lines": "0"
        },
        {
            "label": "2025-10-14_14-20-56",
            "content": "@@ -2435,208 +2435,190 @@\n o = \n-Relogio%0A    while True:%0A        line = input()%0A        args = line.split\n+Watch(23, 59, 58)%0A    print(%22Hora atual:%22, relogio)%0A%0A    relogio.nextSecond\n ()%0A    \n- \n-   \n print(\n-f%22$%7Bline%7D%22)%0A%0A        if args%5B0%5D == %22end%22:%0A            break %0A    \n+%22Depois de 1 segundo:%22, relogio)%0A%0A\n     \n+r\n el\n-if args%5B0%5D == %22show%22:%0A            print(\n+ogio.nextSecond()%0A    print(%22Depois de 2 segundos:%22, \n relo\n@@ -2622,16 +2622,17 @@\n elogio)%0A\n+%0A\n     main\n",
            "lines": "82"
        },
        {
            "label": "2025-10-14_14-25-17",
            "content": "@@ -1,59 +1,89 @@\n-c\n+# Seu objetivo %C3%A9 construtir uma C\n lass\n+e\n  Rel\n-ogio:%0A    def __init__(self, hora: int\n+%C3%B3gio %60Watch%60 que garanta que a hora\n , minuto\n : in\n@@ -82,22 +82,18 @@\n nuto\n-: int,\n+ e\n  segundo\n : in\n@@ -92,163 +92,1026 @@\n undo\n-: int):%0A        self.__hora = 0%0A        self.__minuto = 0%0A        self.__segundo = 0%0A%0A        # Inicializa%C3%A7%C3%A3o usando os m%C3%A9todos set (como o enunciado pede)\n+ sejam v%C3%A1lidos.%0A%0A# - Construtor%0A#   - O construtor deve receber 3 par%C3%A2metros, hora, minuto e segundo.%0A#   - Para fazer a inicializa%C3%A7%C3%A3o dos 3 par%C3%A2metros, utilize os m%C3%A9todos set.%0A# - Crie os m%C3%A9todos getters e setters para cada atributo.%0A#   - Os m%C3%A9todos set devem garantir que os valor atribu%C3%ADdo sempre seja v%C3%A1lido, ou n%C3%A3o realize nenhuma mudan%C3%A7a.%0A# - %60toString%60%0A#   - Crie um m%C3%A9todo que imprime a hora no formato HH:MM:SS.%0A#   - Voc%C3%AA precisar%C3%A1 pesquisar como formatar n%C3%BAmeros menores que 10 com 2 d%C3%ADgitos (ex: 01, 02, 03).%0A# - Nos m%C3%A9todos set, realize a valida%C3%A7%C3%A3o dos valores.%0A#   - Hora deve ser entre 0 e 23.%0A#   - Minuto e segundo devem ser entre 0 e 59.%0A# - Pr%C3%B3ximo Segundo %60nextSecond%60%0A#   - Crie um m%C3%A9todo nextSecond que incrementa o segundo em 1.%0A#   - Se o segundo for 59, ele deve ser zerado e o minuto incrementado.%0A#   - Se o minuto for 59, ele deve ser zerado e a hora incrementada.%0A#   - Se a hora for 23, ela deve ser zerada.%0A%0Aclass Relogio():%0A    def __init__(self, hora: int, minuto: int, segundo: int):\n %0A   \n@@ -1204,39 +1204,12 @@\n ndo)\n-%0A%0A\n    \n- # ===== M%C3%89TODOS SET =====\n+%0A\n %0A   \n@@ -1251,20 +1251,20 @@\n      if \n-0 \n %3C=\n+ 0\n  hora %3C=\n@@ -1298,16 +1298,17 @@\n a = hora\n+ \n %0A       \n@@ -1305,32 +1305,33 @@\n a %0A        else:\n+ \n %0A            pri\n@@ -1332,24 +1332,19 @@\n    print\n+ \n (%22\n-fail: \n Hora inv\n@@ -1374,16 +1374,17 @@\n  0 e 23%22\n+.\n )%0A%0A    d\n@@ -1428,20 +1428,20 @@\n      if \n-0 \n %3C=\n+ 0\n  minuto \n@@ -1481,16 +1481,17 @@\n = minuto\n+ \n %0A       \n@@ -1488,32 +1488,33 @@\n o %0A        else:\n+ \n %0A            pri\n@@ -1515,24 +1515,19 @@\n    print\n+ \n (%22\n-fail: \n Minuto i\n@@ -1555,24 +1555,25 @@\n ntre 0 e 59%22\n+.\n )%0A%0A    def s\n@@ -1619,12 +1619,12 @@\n  if \n-0 \n %3C=\n+ 0\n  seg\n@@ -1671,16 +1671,17 @@\n  segundo\n+ \n %0A       \n@@ -1686,16 +1686,17 @@\n    else:\n+ \n %0A       \n@@ -1709,16 +1709,11 @@\n rint\n+ \n (%22\n-fail: \n Segu\n@@ -1754,41 +1754,12 @@\n  59%22\n+.\n )%0A%0A\n-    # ===== M%C3%89TODOS GET =====%0A\n     \n@@ -1805,16 +1805,20 @@\n .__hora%0A\n+    \n %0A    def\n@@ -1850,25 +1850,25 @@\n   return sel\n-f\n+t\n .__minuto%0A%0A \n@@ -1928,34 +1928,8 @@\n do%0A%0A\n-    # ===== toString =====\n %0A   \n@@ -1937,24 +1937,23 @@\n def \n-toString\n+__str__\n (self):%0A\n     \n@@ -1952,58 +1952,8 @@\n f):%0A\n-        # Formata com dois d%C3%ADgitos (ex: 08:05:09)%0A\n     \n@@ -2030,97 +2030,8 @@\n %7D%22%0A%0A\n-    def __str__(self):%0A        return self.toString()%0A%0A    # ===== Pr%C3%B3ximo Segundo =====%0A\n     \n@@ -2354,45 +2354,62 @@\n  0%0A%0A\n-%0A# ===== C%C3%B3digo de Teste (main) =====\n+    def __str__(self):%0A        return self.toString()%0A\n %0Adef\n@@ -2442,18 +2442,8 @@\n ogio\n-(0, 0, 0)%0A\n %0A   \n@@ -2481,16 +2481,8 @@\n ut()\n-.strip()\n %0A   \n@@ -2583,144 +2583,9 @@\n reak\n-%0A%0A        elif args%5B0%5D == %22init%22:%0A            h, m, s = int(args%5B1%5D), int(args%5B2%5D), int(args%5B3%5D)%0A            relogio = Relogio(h, m, s)%0A\n+ \n %0A   \n@@ -2644,384 +2644,16 @@\n io)%0A\n-%0A \n     \n-   elif args%5B0%5D == %22set%22:%0A            tipo = args%5B1%5D%0A            valor = int(args%5B2%5D)%0A            if tipo == %22h%22:%0A                relogio.set_hora(valor)%0A            elif tipo == %22m%22:%0A                relogio.set_minuto(valor)%0A            elif tipo == %22s%22:%0A                relogio.set_segundo(valor)%0A%0A        elif args%5B0%5D == %22next%22:%0A            relogio.nextSecond()%0A%0A%0A\n main()%0A\n+%0A\n",
            "lines": "83"
        },
        {
            "label": "2025-10-14_14-41-40",
            "content": "@@ -138,32 +138,103 @@\n lf.__segundo = 0\n+%0A%0A        # Inicializa%C3%A7%C3%A3o usando os m%C3%A9todos set (como o enunciado pede)\n %0A        self.se\n@@ -309,24 +309,54 @@\n o(segundo)%0A%0A\n+    # ===== M%C3%89TODOS SET =====%0A\n     def set_\n@@ -890,32 +890,62 @@\n entre 0 e 59%22)%0A%0A\n+    # ===== M%C3%89TODOS GET =====%0A\n     def get_hora\n@@ -1102,27 +1102,104 @@\n     \n-def toString(self):\n+# ===== toString =====%0A    def toString(self):%0A        # Formata com dois d%C3%ADgitos (ex: 08:05:09)\n %0A   \n@@ -1328,16 +1328,50 @@\n ring()%0A%0A\n+    # ===== Pr%C3%B3ximo Segundo =====%0A\n     def \n@@ -1687,16 +1687,53 @@\n a = 0%0A%0A%0A\n+# ===== C%C3%B3digo de Teste (main) =====%0A\n def main\n@@ -2160,24 +2160,22 @@\n     \n-h = int(\n+tipo = \n args%5B1%5D\n-)\n %0A   \n@@ -2183,17 +2183,21 @@\n         \n-m\n+valor\n  = int(a\n@@ -2220,25 +2220,28 @@\n     \n-s = int(args%5B3%5D)%0A\n+if tipo == %22h%22:%0A    \n     \n@@ -2269,11 +2269,49 @@\n ora(\n-h\n+valor\n )%0A\n+            elif tipo == %22m%22:%0A    \n     \n@@ -2341,11 +2341,49 @@\n uto(\n-m\n+valor\n )%0A\n+            elif tipo == %22s%22:%0A    \n     \n@@ -2410,17 +2410,21 @@\n segundo(\n-s\n+valor\n )%0A%0A     \n@@ -2480,12 +2480,20 @@\n xtSecond()%0A%0A\n+%0Amain()%0A\n",
            "lines": "95"
        },
        {
            "label": "2025-10-14_14-43-36",
            "content": "@@ -1,1117 +1,157 @@\n-# Seu objetivo %C3%A9 construtir uma C\n+c\n lass\n-e\n  Rel\n-%C3%B3gio %60Watch%60 que garanta que a hora, minuto e segundo sejam v%C3%A1lidos.%0A%0A# - Construtor%0A#   - O construtor deve receber 3 par%C3%A2metros, hora, minuto e segundo.%0A#   - Para fazer a inicializa%C3%A7%C3%A3o dos 3 par%C3%A2metros, utilize os m%C3%A9todos set.%0A# - Crie os m%C3%A9todos getters e setters para cada atributo.%0A#   - Os m%C3%A9todos set devem garantir que os valor atribu%C3%ADdo sempre seja v%C3%A1lido, ou n%C3%A3o realize nenhuma mudan%C3%A7a.%0A# - %60toString%60%0A#   - Crie um m%C3%A9todo que imprime a hora no formato HH:MM:SS.%0A#   - Voc%C3%AA precisar%C3%A1 pesquisar como formatar n%C3%BAmeros menores que 10 com 2 d%C3%ADgitos (ex: 01, 02, 03).%0A# - Nos m%C3%A9todos set, realize a valida%C3%A7%C3%A3o dos valores.%0A#   - Hora deve ser entre 0 e 23.%0A#   - Minuto e segundo devem ser entre 0 e 59.%0A# - Pr%C3%B3ximo Segundo %60nextSecond%60%0A#   - Crie um m%C3%A9todo nextSecond que incrementa o segundo em 1.%0A#   - Se o segundo for 59, ele deve ser zerado e o minuto incrementado.%0A#   - Se o minuto for 59, ele deve ser zerado e a hora incrementada.%0A#   - Se a hora for 23, ela deve ser zerada.%0A%0Aclass Relogio():%0A    def __init__(self, hora: int, minuto: int, segundo: int):\n+ogio:%0A    def __init__(self, hora: int, minuto: int, segundo: int):%0A        self.__hora = 0%0A        self.__minuto = 0%0A        self.__segundo = 0\n %0A   \n@@ -240,19 +240,16 @@\n segundo)\n-   \n %0A%0A    de\n@@ -288,20 +288,20 @@\n      if \n+0 \n %3C=\n- 0\n  hora %3C=\n@@ -335,17 +335,16 @@\n a = hora\n- \n %0A       \n@@ -341,33 +341,32 @@\n ra%0A        else:\n- \n %0A            pri\n@@ -367,19 +367,24 @@\n    print\n- \n (%22\n+fail: \n Hora inv\n@@ -414,17 +414,16 @@\n  0 e 23%22\n-.\n )%0A%0A    d\n@@ -467,20 +467,20 @@\n      if \n+0 \n %3C=\n- 0\n  minuto \n@@ -520,17 +520,16 @@\n = minuto\n- \n %0A       \n@@ -526,33 +526,32 @@\n to%0A        else:\n- \n %0A            pri\n@@ -552,19 +552,24 @@\n    print\n- \n (%22\n+fail: \n Minuto i\n@@ -593,33 +593,32 @@\n ar entre 0 e 59%22\n-.\n )%0A%0A    def set_s\n@@ -660,12 +660,12 @@\n  if \n+0 \n %3C=\n- 0\n  seg\n@@ -712,17 +712,16 @@\n  segundo\n- \n %0A       \n@@ -726,17 +726,16 @@\n    else:\n- \n %0A       \n@@ -748,11 +748,16 @@\n rint\n- \n (%22\n+fail: \n Segu\n@@ -794,17 +794,16 @@\n  0 e 59%22\n-.\n )%0A%0A    d\n@@ -848,20 +848,16 @@\n .__hora%0A\n-    \n %0A    def\n@@ -893,17 +893,17 @@\n turn sel\n-t\n+f\n .__minut\n@@ -963,25 +963,24 @@\n egundo%0A%0A\n-%0A\n     def \n __str__(\n@@ -963,39 +963,40 @@\n egundo%0A%0A    def \n-__str__\n+toString\n (self):%0A        \n@@ -1065,16 +1065,71 @@\n :02d%7D%22%0A%0A\n+    def __str__(self):%0A        return self.toString()%0A%0A\n     def \n@@ -1448,62 +1448,8 @@\n  0%0A%0A\n-    def __str__(self):%0A        return self.toString()%0A\n %0Adef\n@@ -1478,16 +1478,26 @@\n  Relogio\n+(0, 0, 0)%0A\n %0A    whi\n@@ -1527,16 +1527,24 @@\n  input()\n+.strip()\n %0A       \n@@ -1641,77 +1641,487 @@\n reak\n- %0A        elif args%5B0%5D == %22show%22:%0A            print(relogio)%0A    main\n+%0A%0A        elif args%5B0%5D == %22init%22:%0A            h, m, s = int(args%5B1%5D), int(args%5B2%5D), int(args%5B3%5D)%0A            relogio = Relogio(h, m, s)%0A%0A        elif args%5B0%5D == %22show%22:%0A            print(relogio)%0A%0A        elif args%5B0%5D == %22set%22:%0A            h = int(args%5B1%5D)%0A            m = int(args%5B2%5D)%0A            s = int(args%5B3%5D)%0A            relogio.set_hora(h)%0A            relogio.set_minuto(m)%0A            relogio.set_segundo(s)%0A%0A        elif args%5B0%5D == %22next%22:%0A            relogio.nextSecond\n ()%0A%0A\n",
            "lines": "83"
        },
        {
            "label": "2025-10-14_14-44-23",
            "content": "@@ -1041,16 +1041,18 @@\n  Relogio\n+()\n :%0A    de\n@@ -1111,156 +1111,8 @@\n t):%0A\n-        self.__hora = 0%0A        self.__minuto = 0%0A        self.__segundo = 0%0A%0A        # Inicializa%C3%A7%C3%A3o usando os m%C3%A9todos set (como o enunciado pede)%0A\n     \n@@ -1204,39 +1204,12 @@\n ndo)\n-%0A%0A\n    \n- # ===== M%C3%89TODOS SET =====\n+%0A\n %0A   \n@@ -1251,20 +1251,20 @@\n      if \n-0 \n %3C=\n+ 0\n  hora %3C=\n@@ -1298,16 +1298,17 @@\n a = hora\n+ \n %0A       \n@@ -1305,32 +1305,33 @@\n a %0A        else:\n+ \n %0A            pri\n@@ -1332,24 +1332,19 @@\n    print\n+ \n (%22\n-fail: \n Hora inv\n@@ -1374,16 +1374,17 @@\n  0 e 23%22\n+.\n )%0A%0A    d\n@@ -1428,20 +1428,20 @@\n      if \n-0 \n %3C=\n+ 0\n  minuto \n@@ -1481,16 +1481,17 @@\n = minuto\n+ \n %0A       \n@@ -1488,32 +1488,33 @@\n o %0A        else:\n+ \n %0A            pri\n@@ -1515,24 +1515,19 @@\n    print\n+ \n (%22\n-fail: \n Minuto i\n@@ -1555,24 +1555,25 @@\n ntre 0 e 59%22\n+.\n )%0A%0A    def s\n@@ -1619,12 +1619,12 @@\n  if \n-0 \n %3C=\n+ 0\n  seg\n@@ -1671,16 +1671,17 @@\n  segundo\n+ \n %0A       \n@@ -1686,16 +1686,17 @@\n    else:\n+ \n %0A       \n@@ -1709,16 +1709,11 @@\n rint\n+ \n (%22\n-fail: \n Segu\n@@ -1754,41 +1754,12 @@\n  59%22\n+.\n )%0A%0A\n-    # ===== M%C3%89TODOS GET =====%0A\n     \n@@ -1805,16 +1805,20 @@\n .__hora%0A\n+    \n %0A    def\n@@ -1850,25 +1850,25 @@\n   return sel\n-f\n+t\n .__minuto%0A%0A \n@@ -1928,34 +1928,8 @@\n do%0A%0A\n-    # ===== toString =====\n %0A   \n@@ -1937,24 +1937,23 @@\n def \n-toString\n+__str__\n (self):%0A\n     \n@@ -1952,58 +1952,8 @@\n f):%0A\n-        # Formata com dois d%C3%ADgitos (ex: 08:05:09)%0A\n     \n@@ -2030,97 +2030,8 @@\n %7D%22%0A%0A\n-    def __str__(self):%0A        return self.toString()%0A%0A    # ===== Pr%C3%B3ximo Segundo =====%0A\n     \n@@ -2354,45 +2354,62 @@\n  0%0A%0A\n-%0A# ===== C%C3%B3digo de Teste (main) =====\n+    def __str__(self):%0A        return self.toString()%0A\n %0Adef\n@@ -2442,18 +2442,8 @@\n ogio\n-(0, 0, 0)%0A\n %0A   \n@@ -2481,16 +2481,8 @@\n ut()\n-.strip()\n %0A   \n@@ -2583,144 +2583,9 @@\n reak\n-%0A%0A        elif args%5B0%5D == %22init%22:%0A            h, m, s = int(args%5B1%5D), int(args%5B2%5D), int(args%5B3%5D)%0A            relogio = Relogio(h, m, s)%0A\n+ \n %0A   \n@@ -2644,386 +2644,17 @@\n io)%0A\n-%0A  \n     \n-  elif args%5B0%5D == %22set%22:%0A            tipo = args%5B1%5D%0A            valor = int(args%5B2%5D)%0A            if tipo == %22h%22:%0A                relogio.set_hora(valor)%0A            elif tipo == %22m%22:%0A                relogio.set_minuto(valor)%0A            elif tipo == %22s%22:%0A                relogio.set_segundo(valor)%0A%0A        elif args%5B0%5D == %22next%22:%0A            relogio.nextSecond()%0A%0A%0A\n main()%0A%0A\n %0A\n@@ -2652,9 +2652,8 @@\n main()%0A%0A\n-%0A\n",
            "lines": "83"
        },
        {
            "label": "2025-10-14_14-44-58",
            "content": "@@ -3195,24 +3195,22 @@\n     \n-h = int(\n+tipo = \n args%5B1%5D\n-)\n %0A   \n@@ -3218,17 +3218,21 @@\n         \n-m\n+valor\n  = int(a\n@@ -3255,25 +3255,28 @@\n     \n-s = int(args%5B3%5D)%0A\n+if tipo == %22h%22:%0A    \n     \n@@ -3304,11 +3304,49 @@\n ora(\n-h\n+valor\n )%0A\n+            elif tipo == %22m%22:%0A    \n     \n@@ -3376,11 +3376,49 @@\n uto(\n-m\n+valor\n )%0A\n+            elif tipo == %22s%22:%0A    \n     \n@@ -3445,19 +3445,22 @@\n segundo(\n-s)%0A\n+valor)\n %0A%0A      \n",
            "lines": "116"
        },
        {
            "label": "2025-10-14_14-46-25",
            "content": "@@ -2906,16 +2906,8 @@\n ne%7D%22\n-, end=%22%22\n )%0A%0A \n",
            "lines": "115"
        },
        {
            "label": "2025-10-14_14-48-14",
            "content": "@@ -2902,16 +2902,24 @@\n $%7Bline%7D%22\n+, end=%22%22\n )%0A%0A     \n",
            "lines": "115"
        },
        {
            "label": "2025-10-14_14-48-23",
            "content": "@@ -2900,17 +2900,16 @@\n f%22$%7Bline\n- \n %7D%22)%0A%0A   \n",
            "lines": "115"
        },
        {
            "label": "2025-10-14_14-48-35",
            "content": "@@ -2800,17 +2800,16 @@\n (0, 0, 0\n- \n )%0A%0A    w\n@@ -2900,16 +2900,17 @@\n f%22$%7Bline\n+ \n %7D%22)%0A%0A   \n",
            "lines": "115"
        },
        {
            "label": "2025-10-14_14-49-00",
            "content": "@@ -1183,16 +1183,86 @@\n do = 0%0A%0A\n+        # Inicializa%C3%A7%C3%A3o usando os m%C3%A9todos set (como o enunciado pede)%0A\n         \n@@ -1344,24 +1344,54 @@\n o(segundo)%0A%0A\n+    # ===== M%C3%89TODOS SET =====%0A\n     def set_\n@@ -1925,32 +1925,62 @@\n entre 0 e 59%22)%0A%0A\n+    # ===== M%C3%89TODOS GET =====%0A\n     def get_hora\n@@ -2137,27 +2137,104 @@\n     \n-def toString(self):\n+# ===== toString =====%0A    def toString(self):%0A        # Formata com dois d%C3%ADgitos (ex: 08:05:09)\n %0A   \n@@ -2363,16 +2363,50 @@\n ring()%0A%0A\n+    # ===== Pr%C3%B3ximo Segundo =====%0A\n     def \n@@ -2722,16 +2722,53 @@\n a = 0%0A%0A%0A\n+# ===== C%C3%B3digo de Teste (main) =====%0A\n def main\n@@ -2800,16 +2800,17 @@\n (0, 0, 0\n+ \n )%0A%0A    w\n",
            "lines": "115"
        },
        {
            "label": "2025-10-14_14-49-51",
            "content": "# Seu objetivo \u00e9 construtir uma Classe Rel\u00f3gio `Watch` que garanta que a hora, minuto e segundo sejam v\u00e1lidos.\n\n# - Construtor\n#   - O construtor deve receber 3 par\u00e2metros, hora, minuto e segundo.\n#   - Para fazer a inicializa\u00e7\u00e3o dos 3 par\u00e2metros, utilize os m\u00e9todos set.\n# - Crie os m\u00e9todos getters e setters para cada atributo.\n#   - Os m\u00e9todos set devem garantir que os valor atribu\u00eddo sempre seja v\u00e1lido, ou n\u00e3o realize nenhuma mudan\u00e7a.\n# - `toString`\n#   - Crie um m\u00e9todo que imprime a hora no formato HH:MM:SS.\n#   - Voc\u00ea precisar\u00e1 pesquisar como formatar n\u00fameros menores que 10 com 2 d\u00edgitos (ex: 01, 02, 03).\n# - Nos m\u00e9todos set, realize a valida\u00e7\u00e3o dos valores.\n#   - Hora deve ser entre 0 e 23.\n#   - Minuto e segundo devem ser entre 0 e 59.\n# - Pr\u00f3ximo Segundo `nextSecond`\n#   - Crie um m\u00e9todo nextSecond que incrementa o segundo em 1.\n#   - Se o segundo for 59, ele deve ser zerado e o minuto incrementado.\n#   - Se o minuto for 59, ele deve ser zerado e a hora incrementada.\n#   - Se a hora for 23, ela deve ser zerada.\n\nclass Relogio:\n    def __init__(self, hora: int, minuto: int, segundo: int):\n        self.__hora = 0\n        self.__minuto = 0\n        self.__segundo = 0\n\n        self.set_hora(hora)\n        self.set_minuto(minuto)\n        self.set_segundo(segundo)\n\n    def set_hora(self, hora: int):\n        if 0 <= hora <= 23:\n            self.__hora = hora\n        else:\n            print(\"fail: Hora inv\u00e1lida! Deve estar entre 0 e 23\")\n\n    def set_minuto(self, minuto: int):\n        if 0 <= minuto <= 59:\n            self.__minuto = minuto\n        else:\n            print(\"fail: Minuto inv\u00e1lido! Deve estar entre 0 e 59\")\n\n    def set_segundo(self, segundo: int):\n        if 0 <= segundo <= 59:\n            self.__segundo = segundo\n        else:\n            print(\"fail: Segundo inv\u00e1lido! Deve estar entre 0 e 59\")\n\n    def get_hora(self):\n        return self.__hora\n\n    def get_minuto(self):\n        return self.__minuto\n\n    def get_segundo(self):\n        return self.__segundo\n\n    def toString(self):\n        return f\"{self.__hora:02d}:{self.__minuto:02d}:{self.__segundo:02d}\"\n\n    def __str__(self):\n        return self.toString()\n\n    def nextSecond(self):\n        self.__segundo += 1\n        if self.__segundo > 59:\n            self.__segundo = 0\n            self.__minuto += 1\n            if self.__minuto > 59:\n                self.__minuto = 0\n                self.__hora += 1\n                if self.__hora > 23:\n                    self.__hora = 0\n\n\ndef main():\n    relogio = Relogio(0, 0, 0)\n\n    while True:\n        line = input().strip()\n        args = line.split()\n        print(f\"${line}\")\n\n        if args[0] == \"end\":\n            break\n\n        elif args[0] == \"init\":\n            h, m, s = int(args[1]), int(args[2]), int(args[3])\n            relogio = Relogio(h, m, s)\n\n        elif args[0] == \"show\":\n            print(relogio)\n\n        elif args[0] == \"set\":\n            h = int(args[1])\n            m = int(args[2])\n            s = int(args[3])\n            relogio.set_hora(h)\n            relogio.set_minuto(m)\n            relogio.set_segundo(s)\n\n\n        elif args[0] == \"next\":\n            relogio.nextSecond()\n\n\nmain()\n\n\n",
            "lines": "108"
        }
    ]
}